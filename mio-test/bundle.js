(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":1,"buffer":2,"ieee754":4}],3:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],4:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],5:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],6:[function(require,module,exports){
const WIN_CONDITIONS_COUNT = 6;
const SWITCH_CONDITIONS_COUNT = 6;
const OBJECT_COUNT = 15;
const OBJECT_ART_COUNT = 4;
const ART_BANK_COUNT = 4;
const INSTRUCTION_COUNT = 6;
const TRIGGER_COUNT = 6;
const ACTION_COUNT = 6;

const BACKGROUND_OFFSET = 0x100;
const BACKGROUND_LENGTH = 0x30FF - BACKGROUND_OFFSET;
const LAYER_OFFSET = 0xE5F6;

const Switch = {
	On: 'On',
	Off: 'Off'
};

const AnimationStyle = {
	Hold: 'Hold',
	PlayOnce: 'PlayOnce',
	Loop: 'Loop'
};

const animationStyleMap = {
	[0]: AnimationStyle.Hold,
	[1]: AnimationStyle.PlayOnce,
	[2]: AnimationStyle.Loop
};

function styleFromNumber(digit) {
	return animationStyleMap[digit];
}

const Speed = {
	Slowest: 'Slowest',
	Slow: 'Slow',
	Normal: 'Normal',
	Fast: 'Fast',
	Fastest: 'Fastest'
};

const speedMap = {
	[0]: Speed.Slowest,
	[1]: Speed.Slow,
	[2]: Speed.Normal,
	[3]: Speed.Fast,
	[4]: Speed.Fastest
};

function speedFromNumber(digit) {
	return speedMap[digit];
}

const Overlap = {
	Anywhere: 'Anywhere',
	TryNotToOverlap: 'TryNotToOverlap'
};

const Time = {
	End: 'End'
};

const TouchesWhat = {
	Location: 'Location',
	AnotherObject: 'AnotherObject'
};

const ContactType = {
	Touch: 'Touch',
	Overlap: 'Overlap',
};

const SwitchWhen = {
	TurnsOn: 'TurnsOn',
	IsOn: 'IsOn',
	TurnsOff: 'TurnsOff',
	IsOff: 'IsOff'
};

const switchWhenMap = {
	[0]: SwitchWhen.TurnsOn,
	[1]: SwitchWhen.IsOn,
	[2]: SwitchWhen.TurnsOff,
	[3]: SwitchWhen.IsOff,
};

function switchWhenFromNumber(digit) {
	let switchWhen = switchWhenMap[digit];
	if (switchWhen === undefined) {
		console.warn('Unknown SwitchWhen');
	}
	return switchWhen;
}

const GameCondition = {
	Win: 'Win',
	Loss: 'Loss',
	HasBeenWon: 'HasBeenWon',
	HasBeenLost: 'HasBeenLost',
	NotYetWon: 'NotYetWon',
	NotYetLost: 'NotYetLost'
};

const gameConditionMap = {
	[0]: GameCondition.Win,
	[1]: GameCondition.Loss,
	[2]: GameCondition.HasBeenWon,
	[3]: GameCondition.HasBeenLost,
	[4]: GameCondition.NotYetWon,
	[5]: GameCondition.NotYetLost,
};

function gameConditionFromNumber(digit) {
	let gameCondition = gameConditionMap[digit];
	if (gameCondition === undefined) {
		console.warn('Unknown GameCondition');
	}
	return gameCondition;
}

const Trigger = {
	TapThisObject: 'TapThisObject',
	TapAnywhere: 'TapAnywhere',
	TimeExact: 'TimeExact',
	TimeRandom: 'TimeRandom',
	Contact: 'Contact',
	Switch: 'Switch',
	SpecificArt: 'SpecificArt',
	FinishesPlaying: 'FinishesPlaying',
	GameCondition: 'GameCondition'
};

const Action = {
	Travel: 'Travel',
	Switch: 'Switch',
	Lose: 'Lose',
	ChangeArt: 'ChangeArt',
	StopPlaying: 'StopPlaying',
	SoundEffect: 'SoundEffect',
	ScreenEffect: 'ScreenEffect'
};

const FromLocation = {
	Current: 'Current',
	AnotherPosition: 'AnotherPosition',
	AnotherObject: 'AnotherObject',
};

const Direction = {
	Random: 'Random',
	Location: 'Location',
	Specific: 'Specific'
};

const SpecificDirection = {
	North: 'North',
	NorthEast: 'NorthEast',
	East: 'East',
	SouthEast: 'SouthEast',
	South: 'South',
	SouthWest: 'SouthWest',
	West: 'West',
	NorthWest: 'NorthWest'
};

const specificDirectionMap = {
	[0]: SpecificDirection.North,
	[1]: SpecificDirection.NorthEast,
	[2]: SpecificDirection.East,
	[3]: SpecificDirection.SouthEast,
	[4]: SpecificDirection.South,
	[5]: SpecificDirection.SouthWest,
	[6]: SpecificDirection.West,
	[7]: SpecificDirection.NorthWest,
};

function specificDirectionFromNumber(digit) {
	let direction = specificDirectionMap[digit];
	if (direction === undefined) {
		console.warn('Unknown SpecificDirection');
	}
	return direction;
}

const Travel = {
	GoStraight: 'GoStraight',
	Stop: 'Stop',
	JumpToPosition: 'JumpToPosition',
	JumpToArea: 'JumpToArea',
	JumpToObject: 'JumpToObject',
	Swap: 'Swap',
	Roam: 'Roam',
	Target: 'Target'
};

const Roam = {
	Wiggle: 'Wiggle',
	Insect: 'Insect',
	Reflect: 'Reflect',
	Bounce: 'Bounce'
};

const roamMap = {
	[0]: Roam.Wiggle,
	[1]: Roam.Insect,
	[2]: Roam.Reflect,
	[3]: Roam.Bounce,
};

function roamFromNumber(digit) {
	let roam = roamMap[digit];
	if (roam === undefined) {
		console.warn('Unknown Roam');
	}
	return roam;
}

const ScreenEffect = {
	Flash: 'Flash',
	Shake: 'Shake',
	Confetti: 'Confetti',
	Freeze: 'Freeze'
};

const Length = {
	Short: 'Short',
	Long: 'Long',
	Boss: 'Boss'
};

const StartLocation = {
	Position: 'Position',
	Area: 'Area',
	AttachToObject: 'AttachToObject'
};

function sliceFrom(data, offset, length) {
	return data.slice(offset, offset + length);
}

function nameFromData(data, offset, length) {
	let slice = sliceFrom(data, offset, length);
	let nullTerminatorIndex = slice.findIndex(e => e == 0);
	if (nullTerminatorIndex !== -1) {
		length = nullTerminatorIndex;
		slice = sliceFrom(data, offset, length);
	}

	return new TextDecoder().decode(slice);
}

function firstHexDigit(_byte) {
	return _byte >> 4;
}

function secondHexDigit(_byte) {
	return _byte & 0x0F;
}

let hasBitsSet = (data, bits) => {
	return (data & bits) === bits;
};

class GameData {
	constructor(data) {
		this.data = data;
	}

	get name() {
		let offset = 0x001C;
		let length = 20;
		return nameFromData(this.data, offset, length);
	}

	get command() {
		let offset = 0xE5DD;
		let length = 18;
		return nameFromData(this.data, offset, length);
	}

	get length() {
		if (secondHexDigit(this.data[0xE605]) === 0) {
			return Length.Short;
		} else if (secondHexDigit(this.data[0xE605]) === 1) {
			return Length.Long;
		} else {
			return Length.Boss;
		}
	}

	object(index) {
		return new ObjectData(this.data, index);
	}

	winCondition(conditionIndex, switchIndex) {
		let offset = 0xE5B9 + conditionIndex * 6 + switchIndex;
		let switchMap = {
			[1]: Switch.On,
			[2]: Switch.Off
		};
		let switchState = switchMap[secondHexDigit(this.data[offset])];
		if (switchState === undefined) {
			return null;
		}
		let index = firstHexDigit(this.data[offset]);
		return { index, switchState };
	}
}

function objectOffset(index) {
	return 0xB100 + index * 0x88;
}

function assemblyOffset(index) {
	return 0xBBB9 + index * 720;
}

class ObjectData {
	constructor(data, index) {
		this.data = data;
		this.index = index;
	}

	get offset() {
		return objectOffset(this.index);
	}

	get isActive() {
		let offset = this.offset + 5;
		return this.data[offset] === 0x01;
	}

	get name() {
		let offset = this.offset + 6;
		let length = 18;
		return nameFromData(this.data, offset, length);
	}

	get spriteSize() {
		let offset = this.offset + 4;
		return 16 * (this.data[offset] + 1);
	}

	art(index) {
		return new ArtData(this.data, this, index);
	}

	get assembly() {
		return new AssemblyData(this.data, this);
	}
}


class ArtData {
	constructor(data, object, index) {
		this.data = data;
		this.object = object;
		this.index = index;
	}

	get offset() {
		return this.object.offset + 0x19 + this.index * 0x1C;
	}

	get isActive() {
		let offset = this.offset;
		let _byte = this.data[offset];
		let hasValidFirstByte = _byte <= 0x04;
		return hasValidFirstByte && this.count !== 0;
	}

	get count() {
		let count = this.data[this.offset + 1];
		return count;
	}

	get name() {
		let offset = this.offset + 6;
		let length = 18;
		return nameFromData(this.data, offset, length);
	}

	get bank() {
		let offset = this.offset + 2;
		let length = this.count;
		return sliceFrom(this.data, offset, length);
	}
}

class AssemblyData {
	constructor(data, object) {
		this.data = data;
		this.object = object;
	}

	get offset() {
		return assemblyOffset(this.object.index);
	}

	get isActive() {
		let offset = this.offset;
		return this.data[offset] === 0x04;
	}

	get startInstruction() {
		let art = this.startArt;
		let location = this.startLocation;

		return { art, location };
	}

	get startArt() {
		let offset = this.offset;

		let index = firstHexDigit(this.data[offset + 1]);
		let style = styleFromNumber(firstHexDigit(this.data[offset + 2]));
		let speed = speedFromNumber(firstHexDigit(this.data[offset + 3]));
		let art = {
			index,
			style,
			speed
		};

		return art;
	}

	get startLocation() {
		let offset = this.offset;

		let positionSlice = sliceFrom(this.data, offset + 14, 8);

		let x = positionFromScrambledData(positionSlice, 'GFEDCBA-	-----!IH');
		let y = positionFromScrambledData(positionSlice, '--------	EDCBA---	---!IHGF');
		let position = { x, y };

		if (this.data[offset + 12] === 0x07) {
			return { tag: StartLocation.Position, position };
		} else if (this.data[offset + 12] === 0x87) {
			let overlap;
			if (this.data[offset + 13] === 0x04) {
				overlap = Overlap.TryNotToOverlap;
			} else {
				overlap = Overlap.Anywhere;
			}
			let positionSlice = sliceFrom(this.data, offset + 16, 4);

			let x = positionFromScrambledData(positionSlice, '-----CBA	-!IHGFED');
			let y = positionFromScrambledData(positionSlice, '--------	A-------	IHGFEDCB	-------!');
			let min = position;
			let max = { x, y };
			return { tag: StartLocation.Area, area: { min, max }, overlap };
		} else if ((this.data[offset + 12] & 0x10) !== 0) {
			let index = (this.data[offset + 13] >> 5) + (this.data[offset + 14] % 2) * 8;
			let _offset = {
				x: position.x - 96,
				y: position.y - 64
			};
			return { tag: StartLocation.AttachToObject, index, offset: _offset }
		} else {
			console.warn('Unknown start location type');
			return null;
		}
	}

	instruction(index) {
		return new InstructionData(this.data, this, index);
	}
}

/*
	unscrambleInstructions is a tab separated string of bit -> number mappings
	For example you might pass in 'GFEDCBA_   -----!IH'
	where { A, B, C, D, E, F, G, H, I, ! } represent { 1, 2, 4, 8, 16, 32, 64, 128, 256, -512 } if they are set

*/
function positionFromScrambledData(data, unscrambleInstructions) {
	let position = 0;
	let splitInstructions = unscrambleInstructions.split('\t');
	for (let byteIndex = 0; byteIndex < splitInstructions.length; byteIndex++) {
		for (let bitIndex = 0; bitIndex < splitInstructions[byteIndex].length; bitIndex++) {
			let isBitSet = (data[byteIndex] & (1 << (7 - bitIndex))) !== 0;
			if (!isBitSet) {
				continue;
			}
			switch (splitInstructions[byteIndex][bitIndex]) {
				case '!': {
					position -= 512;
					break;
				}
				case 'I': {
					position += 256;
					break;
				}
				case 'H': {
					position += 128;
					break;
				}
				case 'G': {
					position += 64;
					break;
				}
				case 'F': {
					position += 32;
					break;
				}
				case 'E': {
					position += 16;
					break;
				}
				case 'D': {
					position += 8;
					break;
				}
				case 'C': {
					position += 4;
					break;
				}
				case 'B': {
					position += 2;
					break;
				}
				case 'A': {
					position += 1;
					break;
				}
			}
		}
	}

	return position;
}

class InstructionData {
	constructor(data, assembly, index) {
		this.data = data;
		this.assembly = assembly;
		this.index = index;
	}

	get offset() {
		return this.assembly.offset + 72 + this.index * 120;
	}

	get isActive() {
		return this.trigger(0) !== null;
	}

	trigger(index) {
		let length = 8;
		let offset = this.offset + index * length;

		let triggerSlice = sliceFrom(this.data, offset, length);
		let triggerTag = triggerSlice[0];

		let timeFromData = (data, offset) => {
			return firstHexDigit(data[offset]) + (secondHexDigit(data[offset + 1]) & 0x0F) * 16;
		};

		if (triggerTag === 0x11) {
			return { tag: Trigger.TapAnywhere };
		} else if (secondHexDigit(triggerTag) === 0x01) {
			return { tag: Trigger.TapThisObject };
		} else if (triggerTag === 0x02) {
			let time;
			if (this.data[offset + 2] === 0x14) {
				time = Time.End;
			} else {
				time = timeFromData(this.data, offset + 1);
			}
			return { tag: Trigger.TimeExact, when: time };
		} else if (triggerTag === 0x12) {
			let start = timeFromData(this.data, offset + 1);
			let end;
			if (secondHexDigit(this.data[offset + 3]) === 0x02) {
				end = Time.End;
			} else {
				end = timeFromData(this.data, offset + 2);
			}
			return { tag: Trigger.TimeRandom, start, end };
		} else if (secondHexDigit(triggerTag) === 0x03) {
			let contact;
			if ([0x13, 0x53, 0x93, 0xD3].includes(this.data[offset])) {
				contact = ContactType.Overlap;
			} else {
				contact = ContactType.Touch;
			}
			let touches;
			if (hasBitsSet(this.data[offset + 6], 0x04)) {
				let positionSlice = sliceFrom(this.data, offset + 1, 3);
				let x = positionFromScrambledData(positionSlice, 'FEDCBA--	----!IHG');
				let y = positionFromScrambledData(positionSlice, '--------	DCBA----	--!IHGFE');
				let min = { x, y };
				positionSlice = sliceFrom(this.data, offset + 3, 4);
				x = positionFromScrambledData(positionSlice, 'BA------	!IHGFEDC');
				y = positionFromScrambledData(positionSlice, '--------	--------	HGFEDCBA	------!I');
				let max = { x, y };
				touches = { what: TouchesWhat.Location, area: { min, max } };
			} else {
				let index = (this.data[offset] >> 6) + (this.data[offset + 1] % 4) * 4
				touches = { what: TouchesWhat.AnotherObject, index };
			}
			return { tag: Trigger.Contact, contact, touches };
		} else if (secondHexDigit(triggerTag) === 0x04) {
			let index = firstHexDigit(this.data[offset + 1]);
			let switchWhen = switchWhenFromNumber(this.data[offset + 2]);
			return { tag: Trigger.Switch, index, switchWhen };
		} else if (triggerTag === 0x05) {
			let index = firstHexDigit(this.data[offset + 1]);
			return { tag: Trigger.SpecificArt, index };
		} else if (triggerTag === 0x15) {
			return { tag: Trigger.FinishesPlaying };
		} else if (secondHexDigit(triggerTag) === 0x06) {
			let digit = firstHexDigit(triggerTag);
			let condition = gameConditionFromNumber(digit);
			return { tag: Trigger.GameCondition, condition };
		} else {
			return null;
		}
	}

	action(index) {
		let length = 12;
		let offset = this.offset + 48 + index * length;

		let actionSlice = sliceFrom(this.data, offset, length);
		let actionTag = actionSlice[0];

		let commonPosition = (data, offset) => {
			let positionSlice = sliceFrom(data, offset, 4);
			let x = positionFromScrambledData(positionSlice, 'BA000000	!IHGFEDC');
			let y = positionFromScrambledData(positionSlice, '--------	--------	HGFEDCBA	------!I');
			return { x, y };
		};

		if (actionTag === 0x01) {
			let speed;
			if (this.data[offset + 8] === 1) {
				speed = Speed.Fastest;
			} else {
				let speedDigit = this.data[offset + 7] >> 6;
				speed = speedFromNumber(speedDigit);
			}

			let positionSlice = sliceFrom(this.data, offset + 2, 3);
			let x = positionFromScrambledData(positionSlice, 'HGFEDCBA	------!I');
			let y = positionFromScrambledData(positionSlice, '--------	FEDCBA--	----!IHG');
			let position = { x, y };

			let from;
			if ((secondHexDigit(this.data[offset + 1]) & 0x00000111) === 0) {
				from = { tag: FromLocation.Current };
			} else if (secondHexDigit(this.data[offset + 1]) === 1) {
				from = { tag: FromLocation.AnotherPosition, position };
			} else if (hasBitsSet(this.data[offset + 1], 5)) {
				let index = firstHexDigit(this.data[offset + 1]);
				from = { tag: FromLocation.AnotherObject, index, offset: offsetFromPosition(position) };
			} else {
				console.warn('Unreachable FromLocation', this.data[offset + 1]);
			}

			let directionDigit = this.data[offset + 4];
			let direction;

			if (directionDigit === 0x10) {
				direction = { tag: Direction.Random };
			} else if (hasBitsSet(directionDigit, 0x20)) {
				let position = commonPosition(this.data, offset + 4);

				direction = { tag: Direction.Location, position };
			} else {
				let directionDigit = Math.floor((this.data[offset + 7] % 0x40) / 4);
				let dir = specificDirectionFromNumber(directionDigit);
				direction = { tag: Direction.Specific, direction: dir };
			}
			return { tag: Action.Travel, travel: Travel.GoStraight, from, direction, speed };
		} else if (actionTag === 0x11) {
			return { tag: Action.Travel, travel: Travel.Stop };
		} else if (actionTag === 0x21) {
			let moveToDigit = this.data[offset + 1] & 0x00011111;

			let position = commonPosition(this.data, offset + 2);

			if (moveToDigit === 0x00) {
				return { tag: Action.Travel, travel: Travel.JumpToPosition, position };
			} else if (secondHexDigit(moveToDigit) === 0x01) {
				let index = (this.data[offset + 2] >> 2) & 0x0F;
				return { tag: Action.Travel, travel: Travel.JumpToObject, index, offset: offsetFromPosition(position) };
			} else {
				let positionSlice = sliceFrom(this.data, offset + 5, 3);
				let x = positionFromScrambledData(positionSlice, 'FEDCBA--	----!IHG');
				let y = positionFromScrambledData(positionSlice, '--------	DCBA----	--!IHGFE');
				let max = { x, y };
				let area = { min: position, max };
				let overlap = firstHexDigit(this.data[offset + 1]) === 1 ? Overlap.Anywhere : Overlap.TryNotToOverlap;
				return { tag: Action.Travel, travel: Travel.JumpToArea, area, overlap };
			}
		} else if (actionTag === 0x31) {
			let index = secondHexDigit(this.data[offset + 1]);
			return { tag: Action.Travel, travel: Travel.Swap, index };
		} else if (actionTag === 0x41) {
			let positionSlice = sliceFrom(this.data, offset + 1, 4);
			let x = positionFromScrambledData(positionSlice, 'A-------	IHGFEDCB	-------!');
			let y = positionFromScrambledData(positionSlice, '--------	--------	GFEDCBA-	-----!IH');
			let min = { x, y };
			positionSlice = sliceFrom(this.data, offset + 4, 3);
			x = positionFromScrambledData(positionSlice, 'EDBCA---	---!IHGF');
			y = positionFromScrambledData(positionSlice, '--------	CBA-----	-!IHGFED');
			let max = { x, y };
			let area = { min, max };

			let roamTypeDigit = this.data[offset + 1] % 4;
			let roam = roamFromNumber(roamTypeDigit);

			let overlap;
			if (hasBitsSet(this.data[offset + 1], 0x10)) {
				overlap = Overlap.TryNotToOverlap;
			} else {
				overlap = Overlap.Anywhere;
			}

			let speedDigit = (this.data[offset + 6] >> 7) + (this.data[offset + 7] & 0x03) * 2;
			let speed = speedFromNumber(speedDigit);
			return { tag: Action.Travel, travel: Travel.Roam, roam, area, overlap, speed };
		} else if (actionTag === 0x51) {
			let index = secondHexDigit(this.data[offset + 1]);
			let positionSlice = sliceFrom(this.data, offset + 1, 3);
			let x = positionFromScrambledData(positionSlice, 'DCBA----	--!IHGFE');
			let y = positionFromScrambledData(positionSlice, '--------	BA------	!IHGFEDC');
			let position = { x, y };
			let speedDigit = this.data[offset + 4] & 0b00000111;
			let speed = speedFromNumber(speedDigit);
			return { tag: Action.Travel, travel: Travel.Target, index, offset: offsetFromPosition(position), speed };
		} else if (actionTag === 0x02) {
			return { tag: Action.Switch, switchTo: Switch.On };
		} else if (actionTag === 0x12) {
			return { tag: Action.Switch, switchTo: Switch.Off };
		} else if (secondHexDigit(actionTag) === 0x03) {
			return { tag: Action.Lose };
		} else if (actionTag === 0x04) {
			let index = firstHexDigit(this.data[offset + 1]);
			let style = styleFromNumber(firstHexDigit(this.data[offset + 2]));
			let speed = speedFromNumber(firstHexDigit(this.data[offset + 3]));
			return { tag: Action.ChangeArt, index, style, speed };
		} else if (actionTag === 0x14) {
			return { tag: Action.StopPlaying };
		}
		else if (secondHexDigit(this.data[offset]) === 5) {
			let effect = firstHexDigit(this.data[offset]) * 8 + firstHexDigit(this.data[offset + 1]);
			return { tag: Action.SoundEffect, effect };
		} else if (actionTag === 0x06) {
			return { tag: Action.ScreenEffect, effect: ScreenEffect.Flash };
		} else if (actionTag === 0x16) {
			return { tag: Action.ScreenEffect, effect: ScreenEffect.Shake };
		} else if (actionTag === 0x26) {
			return { tag: Action.ScreenEffect, effect: ScreenEffect.Confetti };
		} else if (actionTag === 0x36) {
			return { tag: Action.ScreenEffect, effect: ScreenEffect.Freeze };
		} else {
			return null;
		}
	}
}

function offsetFromPosition(position) {
	return { x: position.x - 96, y: position.y - 64 };
}

// TODO: Cut this down?
module.exports = {
	Switch, Speed, BACKGROUND_OFFSET, BACKGROUND_LENGTH,
	OBJECT_COUNT, ART_BANK_COUNT, OBJECT_ART_COUNT, WIN_CONDITIONS_COUNT,
	SWITCH_CONDITIONS_COUNT, INSTRUCTION_COUNT, TRIGGER_COUNT, ACTION_COUNT,
	SwitchWhen, LAYER_OFFSET, StartLocation, Overlap, GameData, GameCondition,
	ContactType, Trigger, TouchesWhat, SpecificDirection, FromLocation, Direction,
	Roam, Travel, Action, AnimationStyle, ScreenEffect, Length, Time,
	firstHexDigit, secondHexDigit
};

},{}],7:[function(require,module,exports){
(function (process,Buffer){(function (){
'use strict';

var tonalMidi = require('tonal-midi');

/**
 * MIDI file format constants.
 * @return {Constants}
 */
var Constants = {
  VERSION: '2.1.0',
  HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64],
  // Mthd
  HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06],
  // Header size for SMF
  HEADER_CHUNK_FORMAT0: [0x00, 0x00],
  // Midi Type 0 id
  HEADER_CHUNK_FORMAT1: [0x00, 0x01],
  // Midi Type 1 id
  HEADER_CHUNK_DIVISION: [0x00, 0x80],
  // Defaults to 128 ticks per beat
  TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b],
  // MTrk,
  META_EVENT_ID: 0xFF,
  META_TEXT_ID: 0x01,
  META_COPYRIGHT_ID: 0x02,
  META_TRACK_NAME_ID: 0x03,
  META_INSTRUMENT_NAME_ID: 0x04,
  META_LYRIC_ID: 0x05,
  META_MARKER_ID: 0x06,
  META_CUE_POINT: 0x07,
  META_TEMPO_ID: 0x51,
  META_SMTPE_OFFSET: 0x54,
  META_TIME_SIGNATURE_ID: 0x58,
  META_KEY_SIGNATURE_ID: 0x59,
  META_END_OF_TRACK_ID: [0x2F, 0x00],
  CONTROLLER_CHANGE_STATUS: 0xB0,
  // includes channel number (0)
  PROGRAM_CHANGE_STATUS: 0xC0,
  // includes channel number (0)
  PITCH_BEND_STATUS: 0xE0 // includes channel number (0)

};

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _wrapRegExp() {
  _wrapRegExp = function (re, groups) {
    return new BabelRegExp(re, void 0, groups);
  };

  var _super = RegExp.prototype,
      _groups = new WeakMap();

  function BabelRegExp(re, flags, groups) {
    var _this = new RegExp(re, flags);

    return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
  }

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      return groups[name] = result[g[name]], groups;
    }, Object.create(null));
  }

  return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    return result && (result.groups = buildGroups(result, this)), result;
  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if ("string" == typeof substitution) {
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    }

    if ("function" == typeof substitution) {
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = arguments;
        return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
      });
    }

    return _super[Symbol.replace].call(this, str, substitution);
  }, _wrapRegExp.apply(this, arguments);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/**
 * Static utility functions used throughout the library.
 */

var Utils = /*#__PURE__*/function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  _createClass(Utils, null, [{
    key: "version",
    value:
    /**
     * Gets MidiWriterJS version number.
     * @return {string}
     */
    function version() {
      return Constants.VERSION;
    }
    /**
     * Convert a string to an array of bytes
     * @param {string} string
     * @return {array}
     */

  }, {
    key: "stringToBytes",
    value: function stringToBytes(string) {
      return string.split('').map(function (_char) {
        return _char.charCodeAt();
      });
    }
    /**
     * Checks if argument is a valid number.
     * @param {*} n - Value to check
     * @return {boolean}
     */

  }, {
    key: "isNumeric",
    value: function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    /**
     * Returns the correct MIDI number for the specified pitch.
     * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi
     * @param {(string|number)} pitch - 'C#4' or midi note code
     * @param {string} middleC
     * @return {number}
     */

  }, {
    key: "getPitch",
    value: function getPitch(pitch) {
      var middleC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'C4';
      return 60 - tonalMidi.toMidi(middleC) + tonalMidi.toMidi(pitch);
    }
    /**
     * Translates number of ticks to MIDI timestamp format, returning an array of
     * hex strings with the time values. Midi has a very particular time to express time,
     * take a good look at the spec before ever touching this function.
     * Thanks to https://github.com/sergi/jsmidi
     *
     * @param {number} ticks - Number of ticks to be translated
     * @return {array} - Bytes that form the MIDI time value
     */

  }, {
    key: "numberToVariableLength",
    value: function numberToVariableLength(ticks) {
      ticks = Math.round(ticks);
      var buffer = ticks & 0x7F; // eslint-disable-next-line no-cond-assign

      while (ticks = ticks >> 7) {
        buffer <<= 8;
        buffer |= ticks & 0x7F | 0x80;
      }

      var bList = [];

      while (true) {
        bList.push(buffer & 0xff);
        if (buffer & 0x80) buffer >>= 8;else {
          break;
        }
      }

      return bList;
    }
    /**
     * Counts number of bytes in string
     * @param {string} s
     * @return {array}
     */

  }, {
    key: "stringByteCount",
    value: function stringByteCount(s) {
      return encodeURI(s).split(/%..|./).length - 1;
    }
    /**
     * Get an int from an array of bytes.
     * @param {array} bytes
     * @return {number}
     */

  }, {
    key: "numberFromBytes",
    value: function numberFromBytes(bytes) {
      var hex = '';
      var stringResult;
      bytes.forEach(function (_byte) {
        stringResult = _byte.toString(16); // ensure string is 2 chars

        if (stringResult.length == 1) stringResult = "0" + stringResult;
        hex += stringResult;
      });
      return parseInt(hex, 16);
    }
    /**
     * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded
     * @param {number} number
     * @param {number} bytesNeeded
     * @return {array} - Array of bytes
     */

  }, {
    key: "numberToBytes",
    value: function numberToBytes(number, bytesNeeded) {
      bytesNeeded = bytesNeeded || 1;
      var hexString = number.toString(16);

      if (hexString.length & 1) {
        // Make sure hex string is even number of chars
        hexString = '0' + hexString;
      } // Split hex string into an array of two char elements


      var hexArray = hexString.match(/.{2}/g); // Now parse them out as integers

      hexArray = hexArray.map(function (item) {
        return parseInt(item, 16);
      }); // Prepend empty bytes if we don't have enough

      if (hexArray.length < bytesNeeded) {
        while (bytesNeeded - hexArray.length > 0) {
          hexArray.unshift(0);
        }
      }

      return hexArray;
    }
    /**
     * Converts value to array if needed.
     * @param {string} value
     * @return {array}
     */

  }, {
    key: "toArray",
    value: function toArray(value) {
      if (Array.isArray(value)) return value;
      return [value];
    }
    /**
     * Converts velocity to value 0-127
     * @param {number} velocity - Velocity value 1-100
     * @return {number}
     */

  }, {
    key: "convertVelocity",
    value: function convertVelocity(velocity) {
      // Max passed value limited to 100
      velocity = velocity > 100 ? 100 : velocity;
      return Math.round(velocity / 100 * 127);
    }
    /**
     * Gets the total number of ticks of a specified duration.
     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
     * @param {(string|array)} duration
     * @return {number}
     */

  }, {
    key: "getTickDuration",
    value: function getTickDuration(duration) {
      if (Array.isArray(duration)) {
        // Recursively execute this method for each item in the array and return the sum of tick durations.
        return duration.map(function (value) {
          return Utils.getTickDuration(value);
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
      }

      duration = duration.toString();

      if (duration.toLowerCase().charAt(0) === 't') {
        // If duration starts with 't' then the number that follows is an explicit tick count
        return parseInt(duration.substring(1));
      } // Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION


      var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);
      var tickDuration = quarterTicks * Utils.getDurationMultiplier(duration);
      return Utils.getRoundedIfClose(tickDuration);
    }
    /**
     * Due to rounding errors in JavaScript engines,
     * it's safe to round when we're very close to the actual tick number
     *
     * @static
     * @param {number} tick
     * @return {number}
     */

  }, {
    key: "getRoundedIfClose",
    value: function getRoundedIfClose(tick) {
      var roundedTick = Math.round(tick);
      return Math.abs(roundedTick - tick) < 0.000001 ? roundedTick : tick;
    }
    /**
     * Due to low precision of MIDI,
     * we need to keep track of rounding errors in deltas.
     * This function will calculate the rounding error for a given duration.
     *
     * @static
     * @param {number} tick
     * @return {number}
     */

  }, {
    key: "getPrecisionLoss",
    value: function getPrecisionLoss(tick) {
      var roundedTick = Math.round(tick);
      return roundedTick - tick;
    }
    /**
     * Gets what to multiple ticks/quarter note by to get the specified duration.
     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
     * @param {string} duration
     * @return {number}
     */

  }, {
    key: "getDurationMultiplier",
    value: function getDurationMultiplier(duration) {
      // Need to apply duration here.
      // Quarter note == Constants.HEADER_CHUNK_DIVISION ticks.
      if (duration === '0') return 0;
      var match = duration.match( /*#__PURE__*/_wrapRegExp(/^(d+)?(\d+)(?:t(\d*))?/, {
        dotted: 1,
        base: 2,
        tuplet: 3
      }));

      if (match) {
        var base = Number(match.groups.base); // 1 or any power of two:

        var isValidBase = base === 1 || (base & base - 1) === 0;

        if (isValidBase) {
          // how much faster or slower is this note compared to a quarter?
          var ratio = base / 4;
          var durationInQuarters = 1 / ratio;
          var _match$groups = match.groups,
              dotted = _match$groups.dotted,
              tuplet = _match$groups.tuplet;

          if (dotted) {
            var thisManyDots = dotted.length;
            var divisor = Math.pow(2, thisManyDots);
            durationInQuarters = durationInQuarters + durationInQuarters * ((divisor - 1) / divisor);
          }

          if (typeof tuplet === 'string') {
            var fitInto = durationInQuarters * 2; // default to triplet:

            var thisManyNotes = Number(tuplet || '3');
            durationInQuarters = fitInto / thisManyNotes;
          }

          return durationInQuarters;
        }
      }

      throw new Error(duration + ' is not a valid duration.');
    }
  }]);

  return Utils;
}();

/**
 * Holds all data for a "note on" MIDI event
 * @param {object} fields {data: []}
 * @return {NoteOnEvent}
 */

var NoteOnEvent = /*#__PURE__*/function () {
  function NoteOnEvent(fields) {
    _classCallCheck(this, NoteOnEvent);

    // Set default fields
    fields = Object.assign({
      channel: 1,
      startTick: null,
      velocity: 50,
      wait: 0
    }, fields);
    this.type = 'note-on';
    this.channel = fields.channel;
    this.pitch = fields.pitch;
    this.wait = fields.wait;
    this.velocity = fields.velocity;
    this.startTick = fields.startTick;
    this.tick = null;
    this.delta = null;
    this.data = fields.data;
  }
  /**
   * Builds int array for this event.
   * @param {Track} track - parent track
   * @return {NoteOnEvent}
   */


  _createClass(NoteOnEvent, [{
    key: "buildData",
    value: function buildData(track, precisionDelta) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.data = []; // Explicitly defined startTick event

      if (this.startTick) {
        this.tick = Utils.getRoundedIfClose(this.startTick); // If this is the first event in the track then use event's starting tick as delta.

        if (track.tickPointer == 0) {
          this.delta = this.tick;
        }
      } else {
        this.delta = Utils.getTickDuration(this.wait);
        this.tick = Utils.getRoundedIfClose(track.tickPointer + this.delta);
      }

      this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);
      this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection).concat(this.getStatusByte(), Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));
      return this;
    }
    /**
     * Gets the note on status code based on the selected channel. 0x9{0-F}
     * Note on at channel 0 is 0x90 (144)
     * 0 = Ch 1
     * @return {number}
     */

  }, {
    key: "getStatusByte",
    value: function getStatusByte() {
      return 144 + this.channel - 1;
    }
  }]);

  return NoteOnEvent;
}();

/**
 * Holds all data for a "note off" MIDI event
 * @param {object} fields {data: []}
 * @return {NoteOffEvent}
 */

var NoteOffEvent = /*#__PURE__*/function () {
  function NoteOffEvent(fields) {
    _classCallCheck(this, NoteOffEvent);

    // Set default fields
    fields = Object.assign({
      channel: 1,
      velocity: 50,
      tick: null
    }, fields);
    this.type = 'note-off';
    this.channel = fields.channel;
    this.pitch = fields.pitch;
    this.duration = fields.duration;
    this.velocity = fields.velocity;
    this.tick = fields.tick;
    this.delta = Utils.getTickDuration(this.duration);
    this.data = fields.data;
  }
  /**
   * Builds int array for this event.
   * @param {Track} track - parent track
   * @return {NoteOffEvent}
   */


  _createClass(NoteOffEvent, [{
    key: "buildData",
    value: function buildData(track, precisionDelta) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (this.tick === null) {
        this.tick = Utils.getRoundedIfClose(this.delta + track.tickPointer);
      }

      this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);
      this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection).concat(this.getStatusByte(), Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));
      return this;
    }
    /**
     * Gets the note off status code based on the selected channel. 0x8{0-F}
     * Note off at channel 0 is 0x80 (128)
     * 0 = Ch 1
     * @return {number}
     */

  }, {
    key: "getStatusByte",
    value: function getStatusByte() {
      return 128 + this.channel - 1;
    }
  }]);

  return NoteOffEvent;
}();

/**
 * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.
 * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}
 * @return {NoteEvent}
 */

var NoteEvent = /*#__PURE__*/function () {
  function NoteEvent(fields) {
    _classCallCheck(this, NoteEvent);

    // Set default fields
    fields = Object.assign({
      channel: 1,
      repeat: 1,
      sequential: false,
      startTick: null,
      velocity: 50,
      wait: 0
    }, fields);
    this.data = [];
    this.type = 'note';
    this.pitch = Utils.toArray(fields.pitch);
    this.channel = fields.channel;
    this.duration = fields.duration;
    this.grace = fields.grace;
    this.repeat = fields.repeat;
    this.sequential = fields.sequential;
    this.startTick = fields.startTick;
    this.velocity = fields.velocity;
    this.wait = fields.wait;
    this.tickDuration = Utils.getTickDuration(this.duration);
    this.restDuration = Utils.getTickDuration(this.wait);
    this.events = []; // Hold actual NoteOn/NoteOff events
  }
  /**
   * Builds int array for this event.
   * @return {NoteEvent}
   */


  _createClass(NoteEvent, [{
    key: "buildData",
    value: function buildData() {
      var _this = this;

      // Reset data array
      this.data = []; // Apply grace note(s) and subtract ticks (currently 1 tick per grace note) from tickDuration so net value is the same

      if (this.grace) {
        var graceDuration = 1;
        this.grace = Utils.toArray(this.grace);
        this.grace.forEach(function () {
          var noteEvent = new NoteEvent({
            pitch: _this.grace,
            duration: 'T' + graceDuration
          });
          _this.data = _this.data.concat(noteEvent.data);
        });
      } // fields.pitch could be an array of pitches.
      // If so create note events for each and apply the same duration.
      // By default this is a chord if it's an array of notes that requires one NoteOnEvent.
      // If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.


      if (!this.sequential) {
        // Handle repeat
        for (var j = 0; j < this.repeat; j++) {
          // Note on
          this.pitch.forEach(function (p, i) {
            var noteOnNew;

            if (i == 0) {
              noteOnNew = new NoteOnEvent({
                channel: _this.channel,
                wait: _this.wait,
                velocity: _this.velocity,
                pitch: p,
                startTick: _this.startTick
              });
            } else {
              // Running status (can ommit the note on status)
              //noteOn = new NoteOnEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});
              noteOnNew = new NoteOnEvent({
                channel: _this.channel,
                wait: 0,
                velocity: _this.velocity,
                pitch: p,
                startTick: _this.startTick
              });
            }

            _this.events.push(noteOnNew);
          }); // Note off

          this.pitch.forEach(function (p, i) {
            var noteOffNew;

            if (i == 0) {
              //noteOff = new NoteOffEvent({data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), Utils.convertVelocity(this.velocity))});
              noteOffNew = new NoteOffEvent({
                channel: _this.channel,
                duration: _this.duration,
                velocity: _this.velocity,
                pitch: p,
                tick: _this.startTick !== null ? Utils.getTickDuration(_this.duration) + _this.startTick : null
              });
            } else {
              // Running status (can ommit the note off status)
              //noteOff = new NoteOffEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});
              noteOffNew = new NoteOffEvent({
                channel: _this.channel,
                duration: 0,
                velocity: _this.velocity,
                pitch: p,
                tick: _this.startTick !== null ? Utils.getTickDuration(_this.duration) + _this.startTick : null
              });
            }

            _this.events.push(noteOffNew);
          });
        }
      } else {
        // Handle repeat
        for (var _j = 0; _j < this.repeat; _j++) {
          this.pitch.forEach(function (p, i) {
            var noteOnNew = new NoteOnEvent({
              channel: _this.channel,
              wait: i > 0 ? 0 : _this.wait,
              // wait only applies to first note in repetition
              velocity: _this.velocity,
              pitch: p,
              startTick: _this.startTick
            });
            var noteOffNew = new NoteOffEvent({
              channel: _this.channel,
              duration: _this.duration,
              velocity: _this.velocity,
              pitch: p
            });

            _this.events.push(noteOnNew, noteOffNew);
          });
        }
      }

      return this;
    }
  }]);

  return NoteEvent;
}();

/**
 * Holds all data for a "Pitch Bend" MIDI event
 * [ -1.0, 0, 1.0 ] ->  [ 0, 8192, 16383]
 * @param {object} fields { bend : float, channel : int, delta: int }
 * @return {PitchBendEvent}
 */

var scale14bits = function scale14bits(zeroOne) {
  if (zeroOne <= 0) {
    return Math.floor(16384 * (zeroOne + 1) / 2);
  }

  return Math.floor(16383 * (zeroOne + 1) / 2);
};

var PitchBendEvent = /*#__PURE__*/_createClass(function PitchBendEvent(fields) {
  _classCallCheck(this, PitchBendEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'pitch-bend';
  var bend14 = scale14bits(fields.bend);
  var channel = fields.channel || 0;
  var lsbValue = bend14 & 0x7f;
  var msbValue = bend14 >> 7 & 0x7f;
  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.PITCH_BEND_STATUS | channel, lsbValue, msbValue);
});

/**
 * Holds all data for a "program change" MIDI event
 * @param {object} fields {instrument: integer, delta: integer}
 * @return {ProgramChangeEvent}
 */

var ProgramChangeEvent = /*#__PURE__*/_createClass(function ProgramChangeEvent(fields) {
  _classCallCheck(this, ProgramChangeEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00,
    channel: 0x01
  }, fields);
  this.type = 'program'; // delta time defaults to 0.

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.PROGRAM_CHANGE_STATUS + fields.channel - 1, fields.instrument);
});

/**
 * Holds all data for a "controller change" MIDI event
 * @param {object} fields {controllerNumber: integer, controllerValue: integer, delta: integer}
 * @return {ControllerChangeEvent}
 */

var ControllerChangeEvent = /*#__PURE__*/_createClass(function ControllerChangeEvent(fields) {
  _classCallCheck(this, ControllerChangeEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'controller'; // delta time defaults to 0.

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.CONTROLLER_CHANGE_STATUS, fields.controllerNumber, fields.controllerValue);
});

/**
 * Object representation of a tempo meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {CopyrightEvent}
 */

var CopyrightEvent = /*#__PURE__*/_createClass(function CopyrightEvent(fields) {
  _classCallCheck(this, CopyrightEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'copyright';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_COPYRIGHT_ID, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Text
  );
});

/**
 * Object representation of a cue point meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {CuePointEvent}
 */

var CuePointEvent = /*#__PURE__*/_createClass(function CuePointEvent(fields) {
  _classCallCheck(this, CuePointEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'cue-point';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_CUE_POINT, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Text
  );
});

/**
 * Object representation of a end track meta event.
 * @param {object} fields {delta: integer}
 * @return {EndTrackEvent}
 */

var EndTrackEvent = /*#__PURE__*/_createClass(function EndTrackEvent(fields) {
  _classCallCheck(this, EndTrackEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'end-track'; // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_END_OF_TRACK_ID);
});

/**
 * Object representation of an instrument name meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {InstrumentNameEvent}
 */

var InstrumentNameEvent = /*#__PURE__*/_createClass(function InstrumentNameEvent(fields) {
  _classCallCheck(this, InstrumentNameEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'instrument-name';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_INSTRUMENT_NAME_ID, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Instrument name
  );
});

/**
 * Object representation of a key signature meta event.
 * @return {KeySignatureEvent}
 */

var KeySignatureEvent = /*#__PURE__*/_createClass(function KeySignatureEvent(sf, mi) {
  _classCallCheck(this, KeySignatureEvent);

  this.type = 'key-signature';
  var mode = mi || 0;
  sf = sf || 0; //	Function called with string notation

  if (typeof mi === 'undefined') {
    var fifths = [['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'], ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']];
    var _sflen = sf.length;
    var note = sf || 'C';
    if (sf[0] === sf[0].toLowerCase()) mode = 1;

    if (_sflen > 1) {
      switch (sf.charAt(_sflen - 1)) {
        case 'm':
          mode = 1;
          note = sf.charAt(0).toLowerCase();
          note = note.concat(sf.substring(1, _sflen - 1));
          break;

        case '-':
          mode = 1;
          note = sf.charAt(0).toLowerCase();
          note = note.concat(sf.substring(1, _sflen - 1));
          break;

        case 'M':
          mode = 0;
          note = sf.charAt(0).toUpperCase();
          note = note.concat(sf.substring(1, _sflen - 1));
          break;

        case '+':
          mode = 0;
          note = sf.charAt(0).toUpperCase();
          note = note.concat(sf.substring(1, _sflen - 1));
          break;
      }
    }

    var fifthindex = fifths[mode].indexOf(note);
    sf = fifthindex === -1 ? 0 : fifthindex - 7;
  } // Start with zero time delta


  this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_KEY_SIGNATURE_ID, [0x02], // Size
  Utils.numberToBytes(sf, 1), // Number of sharp or flats ( < 0 flat; > 0 sharp)
  Utils.numberToBytes(mode, 1) // Mode: 0 major, 1 minor
  );
});

/**
 * Object representation of a lyric meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {LyricEvent}
 */

var LyricEvent = /*#__PURE__*/_createClass(function LyricEvent(fields) {
  _classCallCheck(this, LyricEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'lyric';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_LYRIC_ID, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Text
  );
});

/**
 * Object representation of a marker meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {MarkerEvent}
 */

var MarkerEvent = /*#__PURE__*/_createClass(function MarkerEvent(fields) {
  _classCallCheck(this, MarkerEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'marker';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_MARKER_ID, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Text
  );
});

/**
 * Object representation of a tempo meta event.
 * @param {object} fields {bpm: integer, delta: integer}
 * @return {TempoEvent}
 */

var TempoEvent = /*#__PURE__*/_createClass(function TempoEvent(fields) {
  _classCallCheck(this, TempoEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'tempo';
  this.tick = fields.tick;
  var tempo = Math.round(60000000 / fields.bpm); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_TEMPO_ID, [0x03], // Size
  Utils.numberToBytes(tempo, 3) // Tempo, 3 bytes
  );
});

/**
 * Object representation of a tempo meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {TextEvent}
 */

var TextEvent = /*#__PURE__*/_createClass(function TextEvent(fields) {
  _classCallCheck(this, TextEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'text';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_TEXT_ID, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Text
  );
});

/**
 * Object representation of a time signature meta event.
 * @return {TimeSignatureEvent}
 */

var TimeSignatureEvent = /*#__PURE__*/_createClass(function TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock) {
  _classCallCheck(this, TimeSignatureEvent);

  this.type = 'time-signature'; // Start with zero time delta

  this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_TIME_SIGNATURE_ID, [0x04], // Size
  Utils.numberToBytes(numerator, 1), // Numerator, 1 bytes
  Utils.numberToBytes(Math.log2(denominator), 1), // Denominator is expressed as pow of 2, 1 bytes
  Utils.numberToBytes(midiclockspertick || 24, 1), // MIDI Clocks per tick, 1 bytes
  Utils.numberToBytes(notespermidiclock || 8, 1) // Number of 1/32 notes per MIDI clocks, 1 bytes
  );
});

/**
 * Object representation of a tempo meta event.
 * @param {object} fields {text: string, delta: integer}
 * @return {TrackNameEvent}
 */

var TrackNameEvent = /*#__PURE__*/_createClass(function TrackNameEvent(fields) {
  _classCallCheck(this, TrackNameEvent);

  // Set default fields
  fields = Object.assign({
    delta: 0x00
  }, fields);
  this.type = 'track-name';
  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta

  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_TRACK_NAME_ID, Utils.numberToVariableLength(textBytes.length), // Size
  textBytes // Text
  );
});

/**
 * Holds all data for a track.
 * @param {object} fields {type: number, data: array, size: array, events: array}
 * @return {Track}
 */

var Track = /*#__PURE__*/function () {
  function Track() {
    _classCallCheck(this, Track);

    this.type = Constants.TRACK_CHUNK_TYPE;
    this.data = [];
    this.size = [];
    this.events = [];
    this.explicitTickEvents = []; // If there are any events with an explicit tick defined then we will create a "sub" track for those
    // and merge them in and the end.

    this.tickPointer = 0; // Each time an event is added this will increase
  }
  /**
   * Adds any event type to the track.
   * Events without a specific startTick property are assumed to be added in order of how they should output.
   * Events with a specific startTick property are set aside for now will be merged in during build process.
   * @param {(NoteEvent|ProgramChangeEvent)} events - Event object or array of Event objects.
   * @param {function} mapFunction - Callback which can be used to apply specific properties to all events.
   * @return {Track}
   */


  _createClass(Track, [{
    key: "addEvent",
    value: function addEvent(events, mapFunction) {
      var _this = this;

      Utils.toArray(events).forEach(function (event, i) {
        if (event instanceof NoteEvent) {
          // Handle map function if provided
          if (typeof mapFunction === 'function') {
            var properties = mapFunction(i, event);

            if (_typeof(properties) === 'object') {
              for (var j in properties) {
                switch (j) {
                  case 'channel':
                    event.channel = properties[j];
                    break;

                  case 'duration':
                    event.duration = properties[j];
                    break;

                  case 'sequential':
                    event.sequential = properties[j];
                    break;

                  case 'velocity':
                    event.velocity = Utils.convertVelocity(properties[j]);
                    break;
                }
              }
            }
          } // If this note event has an explicit startTick then we need to set aside for now


          if (event.startTick !== null) {
            _this.explicitTickEvents.push(event);
          } else {
            // Push each on/off event to track's event stack
            event.buildData().events.forEach(function (e) {
              return _this.events.push(e);
            });
          }
        } else {
          _this.events.push(event);
        }
      });
      return this;
    }
    /**
     * Builds int array of all events.
     * @param {object} options
     * @return {Track}
     */

  }, {
    key: "buildData",
    value: function buildData() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Remove existing end track event and add one.
      // This makes sure it's at the very end of the event list.
      this.removeEventsByType('end-track').addEvent(new EndTrackEvent()); // Reset

      this.data = [];
      this.size = [];
      this.tickPointer = 0;
      var precisionLoss = 0;
      this.events.forEach(function (event) {
        // Build event & add to total tick duration
        if (event instanceof NoteOnEvent || event instanceof NoteOffEvent) {
          var built = event.buildData(_this2, precisionLoss, options);
          precisionLoss = Utils.getPrecisionLoss(event.deltaWithPrecisionCorrection || 0);
          _this2.data = _this2.data.concat(built.data);
          _this2.tickPointer = Utils.getRoundedIfClose(event.tick);
        } else if (event instanceof TempoEvent) {
          _this2.tickPointer = Utils.getRoundedIfClose(event.tick);
          _this2.data = _this2.data.concat(event.data);
        } else {
          _this2.data = _this2.data.concat(event.data);
        }
      });
      this.mergeExplicitTickEvents();
      this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long

      return this;
    }
  }, {
    key: "mergeExplicitTickEvents",
    value: function mergeExplicitTickEvents() {
      var _this3 = this;

      if (!this.explicitTickEvents.length) return; // First sort asc list of events by startTick

      this.explicitTickEvents.sort(function (a, b) {
        return a.startTick - b.startTick;
      }); // Now this.explicitTickEvents is in correct order, and so is this.events naturally.
      // For each explicit tick event, splice it into the main list of events and
      // adjust the delta on the following events so they still play normally.

      this.explicitTickEvents.forEach(function (noteEvent) {
        // Convert NoteEvent to it's respective NoteOn/NoteOff events
        // Note that as we splice in events the delta for the NoteOff ones will
        // Need to change based on what comes before them after the splice.
        noteEvent.buildData().events.forEach(function (e) {
          return e.buildData(_this3);
        }); // Merge each event indivually into this track's event list.

        noteEvent.events.forEach(function (event) {
          return _this3.mergeSingleEvent(event);
        });
      }); // Hacky way to rebuild track with newly spliced events.  Need better solution.

      this.explicitTickEvents = [];
      this.buildData();
    }
    /**
     * Merges another track's events with this track.
     * @param {Track} track
     * @return {Track}
     */

  }, {
    key: "mergeTrack",
    value: function mergeTrack(track) {
      var _this4 = this;

      // First build this track to populate each event's tick property
      this.buildData(); // Then build track to be merged so that tick property is populated on all events & merge each event.

      track.buildData().events.forEach(function (event) {
        return _this4.mergeSingleEvent(event);
      });
    }
    /**
     * Merges a single event into this track's list of events based on event.tick property.
     * @param {NoteOnEvent|NoteOffEvent} - event
     * @return {Track}
     */

  }, {
    key: "mergeSingleEvent",
    value: function mergeSingleEvent(event) {
      // Find index of existing event we need to follow with
      var lastEventIndex = 0;

      for (var i = 0; i < this.events.length; i++) {
        if (this.events[i].tick > event.tick) break;
        lastEventIndex = i;
      }

      var splicedEventIndex = lastEventIndex + 1; // Need to adjust the delta of this event to ensure it falls on the correct tick.

      event.delta = event.tick - this.events[lastEventIndex].tick; // Splice this event at lastEventIndex + 1

      this.events.splice(splicedEventIndex, 0, event); // Now adjust delta of all following events

      for (var _i = splicedEventIndex + 1; _i < this.events.length; _i++) {
        // Since each existing event should have a tick value at this point we just need to
        // adjust delta to that the event still falls on the correct tick.
        this.events[_i].delta = this.events[_i].tick - this.events[_i - 1].tick;
      }
    }
    /**
     * Removes all events matching specified type.
     * @param {string} eventType - Event type
     * @return {Track}
     */

  }, {
    key: "removeEventsByType",
    value: function removeEventsByType(eventType) {
      var _this5 = this;

      this.events.forEach(function (event, index) {
        if (event.type === eventType) {
          _this5.events.splice(index, 1);
        }
      });
      return this;
    }
    /**
     * Sets tempo of the MIDI file.
     * @param {number} bpm - Tempo in beats per minute.
     * @param {number} tick - Start tick.
     * @return {Track}
     */

  }, {
    key: "setTempo",
    value: function setTempo(bpm) {
      var tick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.addEvent(new TempoEvent({
        bpm: bpm,
        tick: tick
      }));
    }
    /**
     * Sets time signature.
     * @param {number} numerator - Top number of the time signature.
     * @param {number} denominator - Bottom number of the time signature.
     * @param {number} midiclockspertick - Defaults to 24.
     * @param {number} notespermidiclock - Defaults to 8.
     * @return {Track}
     */

  }, {
    key: "setTimeSignature",
    value: function setTimeSignature(numerator, denominator, midiclockspertick, notespermidiclock) {
      return this.addEvent(new TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock));
    }
    /**
     * Sets key signature.
     * @param {*} sf -
     * @param {*} mi -
     * @return {Track}
     */

  }, {
    key: "setKeySignature",
    value: function setKeySignature(sf, mi) {
      return this.addEvent(new KeySignatureEvent(sf, mi));
    }
    /**
     * Adds text to MIDI file.
     * @param {string} text - Text to add.
     * @return {Track}
     */

  }, {
    key: "addText",
    value: function addText(text) {
      return this.addEvent(new TextEvent({
        text: text
      }));
    }
    /**
     * Adds copyright to MIDI file.
     * @param {string} text - Text of copyright line.
     * @return {Track}
     */

  }, {
    key: "addCopyright",
    value: function addCopyright(text) {
      return this.addEvent(new CopyrightEvent({
        text: text
      }));
    }
    /**
     * Adds Sequence/Track Name.
     * @param {string} text - Text of track name.
     * @return {Track}
     */

  }, {
    key: "addTrackName",
    value: function addTrackName(text) {
      return this.addEvent(new TrackNameEvent({
        text: text
      }));
    }
    /**
     * Sets instrument name of track.
     * @param {string} text - Name of instrument.
     * @return {Track}
     */

  }, {
    key: "addInstrumentName",
    value: function addInstrumentName(text) {
      return this.addEvent(new InstrumentNameEvent({
        text: text
      }));
    }
    /**
     * Adds marker to MIDI file.
     * @param {string} text - Marker text.
     * @return {Track}
     */

  }, {
    key: "addMarker",
    value: function addMarker(text) {
      return this.addEvent(new MarkerEvent({
        text: text
      }));
    }
    /**
     * Adds cue point to MIDI file.
     * @param {string} text - Text of cue point.
     * @return {Track}
     */

  }, {
    key: "addCuePoint",
    value: function addCuePoint(text) {
      return this.addEvent(new CuePointEvent({
        text: text
      }));
    }
    /**
     * Adds lyric to MIDI file.
     * @param {string} text - Lyric text to add.
     * @return {Track}
     */

  }, {
    key: "addLyric",
    value: function addLyric(text) {
      return this.addEvent(new LyricEvent({
        text: text
      }));
    }
    /**
     * Channel mode messages
     * @return {Track}
     */

  }, {
    key: "polyModeOn",
    value: function polyModeOn() {
      var event = new NoteOnEvent({
        data: [0x00, 0xB0, 0x7E, 0x00]
      });
      return this.addEvent(event);
    }
    /**
     * Sets a pitch bend.
     * @param {float} bend - Bend value ranging [-1,1], zero meaning no bend.
     * @return {Track}
     */

  }, {
    key: "setPitchBend",
    value: function setPitchBend(bend) {
      return this.addEvent(new PitchBendEvent({
        bend: bend
      }));
    }
    /**
     * Adds a controller change event
     * @param {number} number - Control number.
     * @param {number} value - Control value.
     * @return {Track}
     */

  }, {
    key: "controllerChange",
    value: function controllerChange(number, value) {
      return this.addEvent(new ControllerChangeEvent({
        controllerNumber: number,
        controllerValue: value
      }));
    }
  }]);

  return Track;
}();

var VexFlow = /*#__PURE__*/function () {
  function VexFlow() {
    _classCallCheck(this, VexFlow);
  }

  _createClass(VexFlow, [{
    key: "trackFromVoice",
    value:
    /**
     * Support for converting VexFlow voice into MidiWriterJS track
     * @return MidiWriter.Track object
     */
    function trackFromVoice(voice) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        addRenderedAccidentals: false
      };
      var track = new Track();
      var wait = [];
      voice.tickables.forEach(function (tickable) {
        if (tickable.noteType === 'n') {
          track.addEvent(new NoteEvent({
            pitch: tickable.keys.map(function (pitch, index) {
              return _this.convertPitch(pitch, index, tickable, options.addRenderedAccidentals);
            }),
            duration: _this.convertDuration(tickable),
            wait: wait
          })); // reset wait

          wait = [];
        } else if (tickable.noteType === 'r') {
          // move on to the next tickable and add this to the stack
          // of the `wait` property for the next note event
          wait.push(_this.convertDuration(tickable));
        }
      }); // There may be outstanding rests at the end of the track,
      // pad with a ghost note (zero duration and velocity), just to capture the wait.

      if (wait.length > 0) {
        track.addEvent(new NoteEvent({
          pitch: '[c4]',
          duration: '0',
          wait: wait,
          velocity: '0'
        }));
      }

      return track;
    }
    /**
     * Converts VexFlow pitch syntax to MidiWriterJS syntax
     * @param pitch string
     * @param index pitch index
     * @param note struct from Vexflow
     * @param addRenderedAccidentals adds Vexflow rendered accidentals
     */

  }, {
    key: "convertPitch",
    value: function convertPitch(pitch, index, note) {
      var addRenderedAccidentals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      // Splits note name from octave
      var pitchParts = pitch.split('/'); // Retrieves accidentals from pitch
      // Removes natural accidentals since they are not accepted in Tonal Midi

      var accidentals = pitchParts[0].substring(1).replace('n', '');

      if (addRenderedAccidentals) {
        var _note$getAccidentals;

        (_note$getAccidentals = note.getAccidentals()) === null || _note$getAccidentals === void 0 ? void 0 : _note$getAccidentals.forEach(function (accidental) {
          if (accidental.index === index) {
            if (accidental.type === 'n') {
              accidentals = '';
            } else {
              accidentals += accidental.type;
            }
          }
        });
      }

      return pitchParts[0][0] + accidentals + pitchParts[1];
    }
    /**
     * Converts VexFlow duration syntax to MidiWriterJS syntax
     * @param note struct from VexFlow
     */

  }, {
    key: "convertDuration",
    value: function convertDuration(note) {
      return 'd'.repeat(note.dots) + this.convertBaseDuration(note.duration) + (note.tuplet ? 't' + note.tuplet.num_notes : '');
    }
    /**
     * Converts VexFlow base duration syntax to MidiWriterJS syntax
     * @param duration Vexflow duration
     * @returns MidiWriterJS duration
     */

  }, {
    key: "convertBaseDuration",
    value: function convertBaseDuration(duration) {
      switch (duration) {
        case 'w':
          return '1';

        case 'h':
          return '2';

        case 'q':
          return '4';

        default:
          return duration;
      }
    }
  }]);

  return VexFlow;
}();

/**
 * Object representation of a header chunk section of a MIDI file.
 * @param {number} numberOfTracks - Number of tracks
 * @return {HeaderChunk}
 */

var HeaderChunk = /*#__PURE__*/_createClass(function HeaderChunk(numberOfTracks) {
  _classCallCheck(this, HeaderChunk);

  this.type = Constants.HEADER_CHUNK_TYPE;
  var trackType = numberOfTracks > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;
  this.data = trackType.concat(Utils.numberToBytes(numberOfTracks, 2), // two bytes long,
  Constants.HEADER_CHUNK_DIVISION);
  this.size = [0, 0, 0, this.data.length];
});

/**
 * Object that puts together tracks and provides methods for file output.
 * @param {array|Track} tracks - A single {Track} object or an array of {Track} objects.
 * @param {object} options - {middleC: 'C4'}
 * @return {Writer}
 */

var Writer = /*#__PURE__*/function () {
  function Writer(tracks) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Writer);

    // Ensure tracks is an array
    this.tracks = Utils.toArray(tracks);
    this.options = options;
  }
  /**
   * Builds array of data from chunkschunks.
   * @return {array}
   */


  _createClass(Writer, [{
    key: "buildData",
    value: function buildData() {
      var _this = this;

      var data = [];
      data.push(new HeaderChunk(this.tracks.length)); // For each track add final end of track event and build data

      this.tracks.forEach(function (track) {
        data.push(track.buildData(_this.options));
      });
      return data;
    }
    /**
     * Builds the file into a Uint8Array
     * @return {Uint8Array}
     */

  }, {
    key: "buildFile",
    value: function buildFile() {
      var build = []; // Data consists of chunks which consists of data

      this.buildData().forEach(function (d) {
        return build = build.concat(d.type, d.size, d.data);
      });
      return new Uint8Array(build);
    }
    /**
     * Convert file buffer to a base64 string.  Different methods depending on if browser or node.
     * @return {string}
     */

  }, {
    key: "base64",
    value: function base64() {
      if (typeof btoa === 'function') return btoa(String.fromCharCode.apply(null, this.buildFile()));
      return Buffer.from(this.buildFile()).toString('base64');
    }
    /**
     * Get the data URI.
     * @return {string}
     */

  }, {
    key: "dataUri",
    value: function dataUri() {
      return 'data:audio/midi;base64,' + this.base64();
    }
    /**
     * Set option on instantiated Writer.
     * @param {string} key
     * @param {any} value
     * @return {Writer}
     */

  }, {
    key: "setOption",
    value: function setOption(key, value) {
      this.options[key] = value;
      return this;
    }
    /**
     * Output to stdout
     * @return {string}
     */

  }, {
    key: "stdout",
    value: function stdout() {
      return process.stdout.write(Buffer.from(this.buildFile()));
    }
  }]);

  return Writer;
}();

var main = {
  Constants: Constants,
  NoteOnEvent: NoteOnEvent,
  NoteOffEvent: NoteOffEvent,
  NoteEvent: NoteEvent,
  PitchBendEvent: PitchBendEvent,
  ProgramChangeEvent: ProgramChangeEvent,
  Track: Track,
  Utils: Utils,
  VexFlow: VexFlow,
  Writer: Writer
};

module.exports = main;

}).call(this)}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":5,"buffer":2,"tonal-midi":9}],8:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.NoteParser=t.NoteParser||{})}(this,function(t){"use strict";function n(t,n){return Array(n+1).join(t)}function r(t){return"number"==typeof t}function e(t){return"string"==typeof t}function u(t){return void 0!==t}function c(t,n){return Math.pow(2,(t-69)/12)*(n||440)}function o(){return b}function i(t,n,r){if("string"!=typeof t)return null;var e=b.exec(t);if(!e||!n&&e[4])return null;var u={letter:e[1].toUpperCase(),acc:e[2].replace(/x/g,"##")};u.pc=u.letter+u.acc,u.step=(u.letter.charCodeAt(0)+3)%7,u.alt="b"===u.acc[0]?-u.acc.length:u.acc.length;var o=A[u.step]+u.alt;return u.chroma=o<0?12+o:o%12,e[3]&&(u.oct=+e[3],u.midi=o+12*(u.oct+1),u.freq=c(u.midi,r)),n&&(u.tonicOf=e[4]),u}function f(t){return r(t)?t<0?n("b",-t):n("#",t):""}function a(t){return r(t)?""+t:""}function l(t,n,r){return null===t||void 0===t?null:t.step?l(t.step,t.alt,t.oct):t<0||t>6?null:C.charAt(t)+f(n)+a(r)}function p(t){if((r(t)||e(t))&&t>=0&&t<128)return+t;var n=i(t);return n&&u(n.midi)?n.midi:null}function s(t,n){var r=p(t);return null===r?null:c(r,n)}function d(t){return(i(t)||{}).letter}function m(t){return(i(t)||{}).acc}function h(t){return(i(t)||{}).pc}function v(t){return(i(t)||{}).step}function g(t){return(i(t)||{}).alt}function x(t){return(i(t)||{}).chroma}function y(t){return(i(t)||{}).oct}var b=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/,A=[0,2,4,5,7,9,11],C="CDEFGAB";t.regex=o,t.parse=i,t.build=l,t.midi=p,t.freq=s,t.letter=d,t.acc=m,t.pc=h,t.step=v,t.alt=g,t.chroma=x,t.oct=y});


},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var noteParser = require('note-parser');

/**
 * A midi note number is a number representation of a note pitch. It can be
 * integers so it's equal tempered tuned, or float to indicate it's not
 * tuned into equal temepered scale.
 *
 * This module contains functions to convert to and from midi notes.
 *
 * @example
 * var midi = require('tonal-midi')
 * midi.toMidi('A4') // => 69
 * midi.note(69) // => 'A4'
 * midi.note(61) // => 'Db4'
 * midi.note(61, true) // => 'C#4'
 *
 * @module midi
 */

/**
 * Convert the given note to a midi note number. If you pass a midi number it
 * will returned as is.
 *
 * @param {Array|String|Number} note - the note to get the midi number from
 * @return {Integer} the midi number or null if not valid pitch
 * @example
 * midi.toMidi('C4') // => 60
 * midi.toMidi(60) // => 60
 * midi.toMidi('60') // => 60
 */
function toMidi (val) {
  if (Array.isArray(val) && val.length === 2) return val[0] * 7 + val[1] * 12 + 12
  return noteParser.midi(val)
}

var FLATS = 'C Db D Eb E F Gb G Ab A Bb B'.split(' ');
var SHARPS = 'C C# D D# E F F# G G# A A# B'.split(' ');

/**
 * Given a midi number, returns a note name. The altered notes will have
 * flats unless explicitly set with the optional `useSharps` parameter.
 *
 * @function
 * @param {Integer} midi - the midi note number
 * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats
 * @return {String} the note name
 * @example
 * var midi = require('tonal-midi')
 * midi.note(61) // => 'Db4'
 * midi.note(61, true) // => 'C#4'
 * // it rounds to nearest note
 * midi.note(61.7) // => 'D4'
 */
function note (num, sharps) {
  if (num === true || num === false) return function (m) { return note(m, num) }
  num = Math.round(num);
  var pcs = sharps === true ? SHARPS : FLATS;
  var pc = pcs[num % 12];
  var o = Math.floor(num / 12) - 1;
  return pc + o
}

exports.toMidi = toMidi;
exports.note = note;

},{"note-parser":8}],10:[function(require,module,exports){
const MidiWriter = require('midi-writer-js');

const TRACK_COUNT = 4;
const BASE_SONG_OFFSET = 0xB961;
const BASE_INSTRUMENT_OFFSET = 0xBA6B;
const BASE_VOLUME_OFFSET = 0xBA61;
const BASE_DRUM_OFFSET = 0xB9E1;
const SIMULTANEOUS_DRUMS = 4;
const VOLUME_MULTIPLIER = 13;

const notes = {
	[0]: 'G3',
	[1]: 'G#3',
	[2]: 'A3',
	[3]: 'A#3',
	[4]: 'B3',
	[5]: 'C4',
	[6]: 'C#4',
	[7]: 'D4',
	[8]: 'D#4',
	[9]: 'E4',
	[10]: 'F4',
	[11]: 'F#4',
	[12]: 'G4',
	[13]: 'G#4',
	[14]: 'A4',
	[15]: 'A#4',
	[16]: 'B4',
	[17]: 'C5',
	[18]: 'C#5',
	[19]: 'D5',
	[20]: 'D#5',
	[21]: 'E5',
	[22]: 'F5',
	[23]: 'F#5',
	[24]: 'G5'
};

const lowerNotes = {
	[0]: 'G1',
	[1]: 'G#1',
	[2]: 'A1',
	[3]: 'A#1',
	[4]: 'B1',
	[5]: 'C2',
	[6]: 'C#2',
	[7]: 'D2',
	[8]: 'D#2',
	[9]: 'E2',
	[10]: 'F2',
	[11]: 'F#2',
	[12]: 'G2',
	[13]: 'G#2',
	[14]: 'A2',
	[15]: 'A#2',
	[16]: 'B2',
	[17]: 'C3',
	[18]: 'C#3',
	[19]: 'D3',
	[20]: 'D#3',
	[21]: 'E3',
	[22]: 'F3',
	[23]: 'F#3',
	[24]: 'G3'
};

const instrumentCodes = [0, 18, 6, 22, 73, 56, 65, 75, 24, 29, 106, 33, 40, 13, 11, 47, 72, 78, 17, 38, 77, 59,
	126, 124, 60, 61, 62, 123, 66, 125, 68, 122, 53, 54, 52, 49, 67, 121, 119, 48, 83, 84,
	85, 86, 87, 88, 89, 90];

const instrumentLengths = [
	6, 10, 4, 9, 8, 2, 4, 8,
	4, 16, 4, 4, 8, 2, 10, 3,
	20, 5, 8, 3, 4, 1, 7, 2,
	2, 2, 2, 3, 1, 3.5, 2, 2,
	3, 8, 9, 9, 3, 2, 2, 12,
	8, 9, 12, 8, 12, 5, 4, 3
];

const bassInstruments = [11, 43, 47];

const buildMidiFile = (mioData, loopTimes = 0) => {
	let tracks = [];

	let trackLength = 32;

	let skipDrums = false;
	for (let trackIndex = 0; trackIndex < TRACK_COUNT; trackIndex++) {
		let track = new MidiWriter.Track();

		let songOffset = BASE_SONG_OFFSET + trackIndex * trackLength;

		let instrumentUsed = mioData[BASE_INSTRUMENT_OFFSET + trackIndex];
		console.debug('Using instrument', instrumentUsed);
		let volume = mioData[BASE_VOLUME_OFFSET + trackIndex] * VOLUME_MULTIPLIER;

		let notesUsed = notes;
		if (bassInstruments.includes(instrumentUsed)) {
			notesUsed = lowerNotes;
		}

		// Workarounds for instruments that are causing problems in timidity
		let channel = trackIndex + 1;
		if (instrumentUsed === 38) {
			channel = 1;
		}
		if (instrumentUsed === 37) {
			skipDrums = true;
		}
		track.addEvent(new MidiWriter.ProgramChangeEvent({ channel, instrument: parseInt(instrumentCodes[instrumentUsed]) }));
		for (let loopIter = 0; loopIter <= loopTimes; loopIter++) {
			for (let i = 0; i < trackLength; i++) {
				let note = mioData[songOffset + i];
				if (note !== 255) {
					let noteLength = (instrumentLengths[instrumentUsed] * 8);
					let startTick = 32 * i + loopIter * 1024;
					if (noteLength + startTick > (1 + loopTimes) * 1024) {
						noteLength = (1 + loopTimes) * 1024 - startTick;
					}
					let duration = 'T' + noteLength;
					track.addEvent(new MidiWriter.NoteEvent({
						pitch: notesUsed[note],
						duration,
						startTick,
						channel,
						velocity: volume
					}));
				}
			}
		}

		tracks.push(track);
	}

	if (!skipDrums) {

		let track = new MidiWriter.Track();

		let volume = mioData[BASE_VOLUME_OFFSET + 4] * VOLUME_MULTIPLIER;


		for (let loopIter = 0; loopIter <= loopTimes; loopIter++) {
			for (let i = 0; i < trackLength; i++) {
				for (let drumIndex = 0; drumIndex < SIMULTANEOUS_DRUMS; drumIndex++) {
					let drumUsed = mioData[BASE_DRUM_OFFSET + i + drumIndex * 32];
					if (drumUsed !== 255) {
						let drumConversion = [35, 38, 42, 46, 49, 45, 50, 47, 31, 39, 54, 73, 80, 81];
						let duration = 'T32';
						track.addEvent([
							new MidiWriter.NoteEvent({
								pitch: drumConversion[drumUsed],
								duration,
								channel: 10,
								startTick: 32 * i + loopIter * 1024,
								velocity: volume
							}),
						]);
					}
				}
			}
		}

		tracks.push(track);
	}

	let write = new MidiWriter.Writer(tracks);

	return write.buildFile()
}

module.exports = buildMidiFile;
},{"midi-writer-js":7}],11:[function(require,module,exports){
const Mio = require('mio-loader');
const EventEmitter = require('events').EventEmitter;

const ORIGINAL_CANVAS_WIDTH = 192;
const ORIGINAL_CANVAS_HEIGHT = 128;

function windowSizeComparedToOriginal(width, height) {
	return Math.min(width / ORIGINAL_CANVAS_WIDTH, height / ORIGINAL_CANVAS_HEIGHT);
}

let silentMusicPlayer = {
	playMusic: () => false,
	pauseMusic: () => false,
	hasTrackEnded: () => false,
};

class Player extends EventEmitter {
	mouseDown = false;
	_musicPlayer = silentMusicPlayer;
	gameId = 0;
	shouldShowCommand = true;
	isInfiniteMode = false;
	isPaused = false;
	playbackRate = 1;

	constructor(canvas, document) {
		super();

		this.canvas = canvas;
		this.context = canvas.getContext('2d');

		this.collisionCanvas = document.createElement('canvas');
		this.collisionContext = this.collisionCanvas.getContext('2d');
	}

	get soundNames() {
		return audioNames;
	}

	get gameData() {
		return this._gameData;
	}

	set sounds(sounds) {
		this._sounds = sounds;
	}

	set winSounds(sounds) {
		this._winSounds = sounds;
	}

	set loseSounds(sounds) {
		this._loseSounds = sounds;
	}

	set fontBitmap(fontBitmap) {
		this._fontBitmap = fontBitmap;
	}

	set musicPlayer(musicPlayer) {
		this._musicPlayer = musicPlayer;
	}

	touchScreen() {
		this.mouseDown = true;
	}

	withdrawTouchFromScreen() {
		this.mouseDown = false;
	}

	setStylusPosition(x, y) {
		let rect = this.canvas.getBoundingClientRect();
		let scale = windowSizeComparedToOriginal(this.canvas.width, this.canvas.height);
		mouse.x = Math.floor((x - rect.left) / scale);
		mouse.y = Math.floor((y - rect.top) / scale);
	}

	scaleCanvas(scale) {
		this.canvas.width = ORIGINAL_CANVAS_WIDTH * scale;
		this.canvas.height = ORIGINAL_CANVAS_HEIGHT * scale;
		this.context.scale(scale, scale);
		this.context.imageSmoothingEnabled = false;
	}

	stop() {
		this.gameId++;
	}
	
	loadAndStart(data, playbackRate = 1) {
		this.gameId++;
		let gameData = new Mio.GameData(data);
		console.log(gameData.name);
		console.log(gameData.command);

		let backgroundImage = backgroundImageFromData(this.context, data)

		let { imageData, collisionData } = objectImagesFromGameData(gameData, this.context);

		let winConditions = winConditionsFromGameData(gameData);
		console.log(winConditions);

		let command = gameData.command;
		let length = gameData.length;

		let objects = objectsFromGameData(gameData, collisionData);

		console.log(objects);

		let layers = layersFromData(data, objects.length);

		let properties = propertiesFromObjects(objects)

		jumpToStartingPositions(objects, properties, collisionData);

		console.log(properties);

		this._gameData = gameData;

		this.emit('loaded');

		this._musicPlayer.playMusic();

		this.playbackRate = playbackRate;
		const setPlaybackRates = (sounds) => sounds.forEach(sound =>  sound.playbackRate = playbackRate);
		setPlaybackRates(this._sounds);
		setPlaybackRates(this._winSounds);
		setPlaybackRates(this._loseSounds);

		requestAnimationFrame(() => {

			if (this.shouldShowCommand) {
				drawText(this.context, this._fontBitmap, command);
			}

			this.emit('playing');

			this.runFrame(
				{ id: this.gameId, length, objects, winConditions, layers, collisionData, command },
				{ properties, winStatus: Mio.GameCondition.NotYetWon, frame: 0, time: 0, lastTimestamp: null, isFrozen: false, collisionPixels: [] },
				{ imageData, backgroundImage, sounds: this._sounds, winSounds: this._winSounds, loseSounds: this._loseSounds }
			);
		})
	}

	replay() {
		this.loadAndStart(this._gameData.data, this.playbackRate);
	}

	runFrame(gameData, state, assets) {
		// TODO: Code reuse
		let end;
		if (gameData.length === Mio.Length.Short) {
			end = 32;
		} else if (gameData.length === Mio.Length.Long) {
			end = 64;
		}
		let endFrame = typeof end !== 'undefined' ? end * 7.5 : undefined;
		if (gameData.id !== this.gameId) {
			return;
		}

		const emitEndedEvent = () => {
			if (!this.isPaused) {
				this.emit('ended');
			}
		};
		// TODO: Relies on number > undefined being false, change to something more obvious
		if (state.frame > endFrame && !this.isInfiniteMode) {
			emitEndedEvent();
			this.isPaused = true;
		} else if (gameData.length === Mio.Length.Boss) {
			let hasConcluded = (state.winStatus === Mio.GameCondition.HasBeenWon || state.winStatus === Mio.GameCondition.HasBeenLost);
			if (hasConcluded && state.frame % 240 === 0 && !this.isInfiniteMode) {
				emitEndedEvent();
				this.isPaused = true;
			} else {
				this.isPaused = false;
			}
		} else {
			this.isPaused = false;
		}

		let frameDelay = 1000 / 60;
		if (this.isPaused) {
			this._musicPlayer.pauseMusic();
			this.drawGame(state, gameData, assets);
			this.context.fillStyle = "#88888844";
			this.context.fillRect(0, 0, BACKGROUND_WIDTH, BACKGROUND_HEIGHT);
		} else {
			if (state.time > state.frame * frameDelay) {
				if (this._musicPlayer.hasTrackEnded() && gameData.length === Mio.Length.Boss) {
					this._musicPlayer.playMusic();
				}

				this.updateGame(gameData, state, assets);
				this.emit('frameupdate', state.frame - 1, endFrame);
				if (state.winStatus === Mio.GameCondition.Win) {
					this.emit('won');
				} else if (state.winStatus === Mio.GameCondition.Loss) {
					this.emit('lost');
				}
			}
		}

		requestAnimationFrame(time => {
			if (this.isPaused) {
				state.lastTimestamp = null;
			} else {
				if (state.lastTimestamp === null) {
					state.lastTimestamp = time;
				}

				const MAX_PLAUSIBLE_DELTA = 50;
				state.time += Math.min(time - state.lastTimestamp, MAX_PLAUSIBLE_DELTA) * this.playbackRate;
				state.lastTimestamp = time;
			}
			this.runFrame(gameData, state, assets);
		})
	}

	drawGame(state, gameData, assets) {
		if (state.isFrozen) {
			this.context.filter = 'invert(1)';
		} else {
			this.context.filter = 'none';
		}
		this.context.drawImage(assets.backgroundImage, 0, 0);
		this.collisionContext.clearRect(0, 0, this.collisionCanvas.width, this.collisionCanvas.height);

		let layerCount = Math.min(gameData.layers.length, state.properties.length);

		for (let layer = 0; layer < layerCount; layer++) {
			let i = gameData.layers[layer];
			let props = state.properties[i];
			if (props !== null) {
				let size = props.size;
				let halfSize = size / 2;
				let bank = props.art.bankIndex;
				let image = assets.imageData[bank];
				let position = props.position;
				this.context.drawImage(image, Math.floor(position.x - halfSize), Math.floor(position.y - halfSize));
				let collisionImage = gameData.collisionData[bank].sprite;
				this.collisionContext.drawImage(collisionImage, Math.floor(position.x - halfSize), Math.floor(position.y - halfSize));
			}
		}

		if (state.frame < 45 && this.shouldShowCommand) {
			drawText(this.context, this._fontBitmap, gameData.command);
		}
	}

	updateGame(gameData, state, assets) {
		let oldWinStatus = state.winStatus;

		this.updateMouse(mouse);

		if (!state.isFrozen) {
			let triggeredActions = triggeredActionsThisFrame(state, gameData);

			applyAllActions(triggeredActions, state, gameData, assets);

			updateAnimations(state, gameData);

			moveObjects(state, gameData);

			updateSwitchStates(state.properties);

			winGameIfConditionsAreMet(state, gameData, oldWinStatus, assets.winSounds);

			loseIfOutOfTime(state, gameData, assets.loseSounds);
		}

		this.drawGame(state, gameData, assets);

		state.collisionPixels = this.collisionContext.getImageData(0, 0, BACKGROUND_WIDTH, BACKGROUND_HEIGHT).data;

		state.frame++;
	}

	updateMouse(mouse) {
		if (mouse.state === ButtonState.Up || mouse.state === ButtonState.Release) {
			if (this.mouseDown) {
				console.log('Mouse pressed');
				mouse.state = ButtonState.Press;
			} else {
				mouse.state = ButtonState.Up;
			}
		} else if (mouse.state === ButtonState.Down || mouse.state === ButtonState.Press) {
			if (this.mouseDown) {
				mouse.state = ButtonState.Down;
			} else {
				mouse.state = ButtonState.Release;
			}
		}
	}
}

const BACKGROUND_WIDTH = 192;
const BACKGROUND_HEIGHT = 128;
const BACKGROUND_PIXEL_COUNT = BACKGROUND_WIDTH * BACKGROUND_HEIGHT;
const COLOUR_BYTES_COUNT = 4;
// TODO: Make algorithm that doesn't rely on luck
const MAX_BEFORE_GAME_JUMP_ATTEMPTS = 18;
const MAX_DURING_GAME_JUMP_ATTEMPTS = 6;

let drawText = (context, fontBitmap, text, size = 16) => {
	if (typeof fontBitmap === 'undefined') {
		return;
	}
	let gradient = context.createLinearGradient(0, 0, 1, 100);
	gradient.addColorStop(0, 'white');
	gradient.addColorStop(0.6, 'white');
	gradient.addColorStop(0.675, 'gray');

	let w = 18;
	let h = 18;

	let widthInPixels = 0;

	let firstChar = new TextEncoder().encode(text)[0];
	if ((firstChar & 0xE0) !== 0xE0) {

		for (let i = 0; i < text.length; i++) {
			let letter = text[i];
			let letterWidth = letterSpacing[letter] || w;

			widthInPixels += letterWidth;
		}

		let startOffset = BACKGROUND_WIDTH / 2 - widthInPixels / 2;

		let offsetSoFar = startOffset;

		for (let i = 0; i < text.length; i++) {
			let letterIndex = indexInFontBitmap(text[i]);
			let bitmapIndex = letterIndex < 256 ? letterIndex : 32;
			let bitmapX = bitmapIndex % 16 * w;
			let bitmapY = Math.floor(bitmapIndex / 16) * h;

			let args = [fontBitmap, bitmapX, bitmapY, w - 1, h - 1, offsetSoFar, BACKGROUND_HEIGHT / 2 - h + 5, w, h];

			context.drawImage(...args);

			let letterWidth = letterSpacing[text[i]] || w;
			offsetSoFar += letterWidth;
		}
	} else {
		context.font = size + 'px warioware-diy-ds-microgame-font';
		context.lineWidth = 2;
		context.textAlign = "center";
		//text = text.split("").join(String.fromCharCode(0x200A))
		context.strokeText(text, BACKGROUND_WIDTH / 2, BACKGROUND_HEIGHT / 2);

		context.fillStyle = gradient;
		context.textAlign = "center";
		context.fillText(text, BACKGROUND_WIDTH / 2, BACKGROUND_HEIGHT / 2);
	}
}

let randomInRange = (min, max) => min + (max - min) * Math.random();
let randomIntInRange = (min, max) => Math.floor(randomInRange(min, max));
let randomInArray = (array) => array[randomIntInRange(0, array.length)];

function positionInArea(area, size) {
	let halfSize = size / 2;
	let minX = area.min.x + halfSize;
	let maxX = area.max.x - halfSize;
	let x;
	if (minX > maxX) {
		x = (area.min.x + area.max.x) / 2;
	} else {
		x = randomIntInRange(minX, maxX);
	}
	let minY = area.min.y + halfSize;
	let maxY = area.max.y - halfSize;
	let y;
	if (minY > maxY) {
		y = (area.min.y + area.max.y) / 2;
	} else {
		y = randomIntInRange(minY, maxY);
	}
	return { x, y }
}

function animationTimeFromSpeed(speed) {
	let animationTimeMap = {
		[Mio.Speed.Slowest]: 60,
		[Mio.Speed.Slow]: 30,
		[Mio.Speed.Normal]: 15,
		[Mio.Speed.Fast]: 8,
		[Mio.Speed.Fastest]: 4
	};

	return animationTimeMap[speed];
}

function valueFromSpeed(speed) {
	let speedMap = {
		[Mio.Speed.Slowest]: 0.5,
		[Mio.Speed.Slow]: 1,
		[Mio.Speed.Normal]: 1.5,
		[Mio.Speed.Fast]: 3,
		[Mio.Speed.Fastest]: 6
	};
	return speedMap[speed];
}

const ActiveTravel = {
	GoStraight: 'GoStraight',
	GoToPoint: 'GoToPoint',
	GoToObject: 'GoToObject',
	Roam: 'Mio.Roam',
	AttachTo: 'AttachTo',
	Stop: 'Stop',
	JumpToPosition: 'JumpToPosition',
	JumpToArea: 'JumpToArea',
	Swap: 'Swap'
};

const BounceDirection = {
	Left: 'Left',
	Right: 'Right',
	None: 'None'
};

function colourFromPixelValue(pixel) {
	switch (pixel) {
		case 0x00: {
			return [0, 0, 0, 0];
		}
		case 0x01: {
			return [0, 0, 0, 255];
		}
		case 0x02: {
			return [255, 222, 156, 255];
		}
		case 0x03: {
			return [255, 173, 49, 255];
		}
		case 0x04: {
			return [198, 74, 0, 255];
		}
		case 0x05: {
			return [255, 0, 0, 255];
		}
		case 0x06: {
			return [206, 107, 239, 255];
		}
		case 0x07: {
			return [16, 198, 206, 255];
		}
		case 0x08: {
			return [41, 107, 198, 255];
		}
		case 0x09: {
			return [8, 148, 82, 255];
		}
		case 0x0A: {
			return [115, 214, 57, 255];
		}
		case 0x0B: {
			return [255, 255, 90, 255];
		}
		case 0x0C: {
			return [123, 123, 123, 255];
		}
		case 0x0D: {
			return [198, 198, 198, 255];
		}
		case 0x0E: {
			return [255, 255, 255, 255];
		}
		// Value of hidden colour learnt from https://github.com/xperia64/DIYEdit/blob/master/src/com/xperia64/diyedit/editors/GameEdit.java
		case 0x0F: {
			return [74, 156, 173, 255];
		}
		default: {
			console.warn('Unreachable Pixel Colour', pixel);
			return [128, 128, 128, 128];
		}
	}
}

function backgroundPixelsFromData(data) {
	let scrambledPixels = [];

	for (let i = Mio.BACKGROUND_OFFSET; i <= Mio.BACKGROUND_OFFSET + Mio.BACKGROUND_LENGTH; i++) {
		scrambledPixels.push(Mio.secondHexDigit(data[i]));
		scrambledPixels.push(Mio.firstHexDigit(data[i]));
	}

	let backgroundPixels = new Uint8ClampedArray(BACKGROUND_PIXEL_COUNT * COLOUR_BYTES_COUNT);

	for (let i = 0; i < BACKGROUND_PIXEL_COUNT; i++) {
		let blockSize = 1536;
		let blockIndex = Math.floor(i / blockSize);
		let internalIndex = i % blockSize;
		let gridSquareIndex = Math.floor(internalIndex / 64);
		let gridColumnIndex = i % 8;
		let gridRowIndex = Math.floor(internalIndex / 8) % 8;
		let columnIndex = (gridSquareIndex * 8 + gridColumnIndex);
		let rowIndex = (blockIndex * 8 + gridRowIndex);

		let colour = colourFromPixelValue(scrambledPixels[i]);

		for (let c = 0; c < colour.length; c++) {
			let index = rowIndex * BACKGROUND_WIDTH + columnIndex;
			backgroundPixels[index * COLOUR_BYTES_COUNT + c] = colour[c];
		}
	}

	return backgroundPixels;
}

function backgroundImageFromData(context, data) {
	let backgroundPixels = backgroundPixelsFromData(data);

	let backgroundImageData = context.createImageData(BACKGROUND_WIDTH, BACKGROUND_HEIGHT);
	backgroundImageData.data.set(backgroundPixels);

	let tempCanvas = document.createElement('canvas');
	let tempContext = tempCanvas.getContext('2d');

	tempCanvas.width = BACKGROUND_WIDTH;
	tempCanvas.height = BACKGROUND_HEIGHT;
	tempContext.putImageData(backgroundImageData, 0, 0);
	let backgroundImage = new Image();
	backgroundImage.src = tempCanvas.toDataURL();

	return backgroundImage;
}

function gridsUsedFromSize(size) {
	let gridMultiplier = 4;
	switch (size) {
		case 16: {
			return 1 * gridMultiplier;
		}
		case 32: {
			return 4 * gridMultiplier;
		}
		case 48: {
			return 9 * gridMultiplier;
		}
		case 64: {
			return 16 * gridMultiplier;
		}
		default: {
			console.warn('Unreachable Size');
			return null;
		}
	}
}

function objectImagesFromGameData(gameData, context) {
	let imagesOffset = 0x3104;
	let imagesLength = 0xB103 - imagesOffset;
	let imagesPixel = [];
	for (let i = imagesOffset; i <= imagesOffset + imagesLength; i++) {
		imagesPixel.push(Mio.secondHexDigit(gameData.data[i]));
		imagesPixel.push(Mio.firstHexDigit(gameData.data[i]));
	}

	let imageData = {};
	let collisionData = {};

	for (let i = 0; i < Mio.OBJECT_COUNT; i++) {
		let object = gameData.object(i);
		if (!object.isActive) {
			continue;
		}

		let size = object.spriteSize;

		for (let j = 0; j < Mio.ART_BANK_COUNT; j++) {
			let art = object.art(j);
			if (!art.isActive) {
				continue;
			}
			let bank = art.bank;
			for (let b = 0; b < bank.length; b++) {
				const gridWidth = 8;
				const gridHeight = 8;
				let gridsUsed = gridsUsedFromSize(size);

				let firstGrid = bank[b] * 4;
				let firstPixelIndex = firstGrid * gridWidth * gridHeight;
				let totalPixelCount = gridsUsed * gridWidth * gridHeight;

				let image = context.createImageData(size, size);
				let collisionImage = context.createImageData(size, size);
				for (let index = 0; index < totalPixelCount; index++) {
					let pixel = imagesPixel[firstPixelIndex + index];
					let grid = Math.floor(index / 64);
					let internal_grid_index = index % 64;
					let gridColumnIndex = index % 8;
					let gridRowIndex = Math.floor(internal_grid_index / 8);
					let gridBaseX = grid % Math.floor(size / 8);
					let gridBaseY = Math.floor(grid / Math.floor(size / 8));
					let columnIndex = gridBaseX * 8 + gridColumnIndex;
					let rowIndex = gridBaseY * 8 + gridRowIndex;

					let colour = colourFromPixelValue(pixel);

					for (let c = 0; c < colour.length; c++) {
						let pixelIndex = rowIndex * size + columnIndex;
						image.data[pixelIndex * COLOUR_BYTES_COUNT + c] = colour[c];
						// Pastes the object id onto the rgb of the collisonImage then copies the alpha
						let paste;
						if (c < 3) {
							paste = i;
						} else {
							paste = colour[c];
						}
						collisionImage.data[pixelIndex * COLOUR_BYTES_COUNT + c] = paste;
					}
				}
				let tempCanvas = document.createElement('canvas');
				let tempContext = tempCanvas.getContext('2d');

				tempCanvas.width = size;
				tempCanvas.height = size;
				tempContext.putImageData(image, 0, 0);
				let sprite = new Image();
				sprite.src = tempCanvas.toDataURL();
				imageData[bank[b]] = sprite;
				collisionData[bank[b]] = collisionImage.data;
				let collisionSprite = new Image();
				tempContext.putImageData(collisionImage, 0, 0);
				collisionSprite.src = tempCanvas.toDataURL();
				collisionData[bank[b]].sprite = collisionSprite;
			}
		}
	}

	return { imageData, collisionData };
}

function winConditionsFromGameData(gameData) {
	let winConditions = [];

	for (let i = 0; i < Mio.WIN_CONDITIONS_COUNT; i++) {
		winConditions.push([]);
		for (let j = 0; j < Mio.SWITCH_CONDITIONS_COUNT; j++) {
			let condition = gameData.winCondition(i, j);
			if (condition !== null) {
				winConditions[i].push(condition);
			}
		}
	}

	return winConditions;
}

function artSetFromObject(object, collisionData) {
	let artSet = [];
	for (let a = 0; a < Mio.OBJECT_ART_COUNT; a++) {
		let art = object.art(a);
		if (art.isActive) {
			let bank = art.bank;

			// TODO: Clean up this collision area gathering code
			let leftest = null;
			let rightest = null;
			let toppest = null;
			let bottomest = null;
			let size = object.spriteSize;
			let totalPixelCount = size * size;
			for (let b = 0; b < bank.length; b++) {
				let collisionImage = collisionData[bank[b]];
				for (let index = 0; index < totalPixelCount; index++) {
					let alpha = collisionImage[index * COLOUR_BYTES_COUNT + 3];
					if (alpha !== 0) {
						let rowIndex = index % size;
						let columnIndex = Math.floor(index / size);
						if (leftest === null) {
							leftest = rowIndex;
							rightest = rowIndex + 1;
							toppest = columnIndex;
							bottomest = columnIndex + 1;
						} else {
							leftest = Math.min(leftest, rowIndex);
							rightest = Math.max(rightest, rowIndex + 1);
							toppest = Math.min(toppest, columnIndex);
							bottomest = Math.max(bottomest, columnIndex + 1);
						}
					}
				}
			}
			// TODO: What should the collision area size be when there aren't any pixels
			leftest = leftest !== null ? leftest : 0;
			toppest = toppest !== null ? toppest : 0;
			rightest = rightest !== null ? rightest : size;
			bottomest = bottomest !== null ? bottomest : size;
			let collisionArea = {
				min: {
					x: leftest,
					y: toppest
				},
				max: {
					x: rightest,
					y: bottomest
				}
			};

			artSet.push({ name: art.name, bank, collisionArea });
		} else {
			artSet.push(null);
		}
	}

	return artSet;
}

function objectsFromGameData(gameData, collisionData) {
	let objects = [];

	for (let i = 0; i < Mio.OBJECT_COUNT; i++) {
		let object = gameData.object(i);

		if (object.isActive) {
			let artSet = artSetFromObject(object, collisionData);

			let assembly = object.assembly;

			if (assembly.isActive) {
				let startInstruction = assembly.startInstruction;

				let instructions = [];

				for (let ins = 0; ins < Mio.INSTRUCTION_COUNT; ins++) {
					let instruction = assembly.instruction(ins);
					if (instruction.isActive) {
						let triggers = [];
						for (let t = 0; t < Mio.TRIGGER_COUNT; t++) {
							let trigger = instruction.trigger(t);
							if (trigger !== null) {
								triggers.push(trigger);
							}
						}
						let actions = [];
						for (let a = 0; a < Mio.ACTION_COUNT; a++) {
							let action = instruction.action(a);
							if (action !== null) {
								actions.push(action);
							}
						}
						instructions.push({ triggers, actions });
					}
				}

				objects.push({
					name: object.name,
					spriteSize: object.spriteSize,
					art: artSet,
					startInstruction,
					instructions,
				});
			} else {
				objects.push(null);
			}
		} else {
			objects.push(null);
		}
	}

	return objects;
}

function propertiesFromObjects(objects) {
	let properties = [];

	for (let i = 0; i < objects.length; i++) {
		if (objects[i] === null) {
			properties.push(null);
			continue;
		}
		let size = objects[i].spriteSize;
		let position = null;
		let travel = [{ tag: ActiveTravel.Stop }];

		let StartArt = objects[i].startInstruction.art;
		let artIndex = StartArt.index;
		let art = objects[i].art[artIndex];
		let bankIndex = art.bank[0];

		properties.push({
			position,
			size,
			art: {
				bankIndex,
				artIndex,
				style: StartArt.style,
				speed: StartArt.speed,
				finishedPlaying: false,
				animationIndex: 0,
				timeToNextChange: animationTimeFromSpeed(StartArt.speed)
			},
			travel,
			switchState: Mio.SwitchWhen.IsOff,
			nextSwitchState: Mio.SwitchWhen.IsOff,
		});
	}

	return properties;
}

function layersFromData(data, objectsLength) {
	let layers = [];

	for (let layer = 0; layer < objectsLength; layer++) {
		let index = data[Mio.LAYER_OFFSET + objectsLength - layer - 1];
		layers.push(index);
	}

	return layers;
}

function jumpToStartingPositions(objects, properties, collisionData) {
	for (let i = 0; i < objects.length; i++) {
		if (objects[i] === null) {
			continue;
		}
		let location = objects[i].startInstruction.location;
		let size = objects[i].spriteSize;
		let props = properties[i];
		if (location.tag === Mio.StartLocation.Position) {
			props.position = clonePosition(location.position);
		} else if (location.tag === Mio.StartLocation.Area) {
			let area = cloneArea(location.area);
			let artIndex = props.art.artIndex;
			let collisionArea = objects[i].art[artIndex].collisionArea;
			area.min.x -= collisionArea.min.x;
			area.min.y -= collisionArea.min.y;
			area.max.x += props.size - collisionArea.max.x;
			area.max.y += props.size - collisionArea.max.y;
			if (location.overlap === Mio.Overlap.Anywhere) {
				props.position = positionInArea(area, size);
			} else {
				attemptToJump(properties, i, area, collisionData, MAX_BEFORE_GAME_JUMP_ATTEMPTS);
			}
		} else if (location.tag === Mio.StartLocation.AttachToObject) {
			props.travel = [{
				tag: ActiveTravel.AttachTo,
				index: location.index,
				offset: location.offset
			}];
		}
	}

	// Should work without this, but should stop it from getting stuck in exceptional circumstances
	let tries = 50;
	// TODO: Do this recursively instead
	while (properties.some(p => p !== null && p.position === null) && tries >= 0) {
		tries--;
		for (let i = 0; i < objects.length; i++) {
			if (objects[i] === null) {
				continue;
			}
			let location = objects[i].startInstruction.location;
			let props = properties[i];
			if (location.tag === Mio.StartLocation.AttachToObject && props.position === null) {
				let otherIndex = location.index;
				if (properties[otherIndex].position !== null) {
					props.position = clonePosition(properties[otherIndex].position);
					props.position.x += location.offset.x;
					props.position.y += location.offset.y;
				}
			}
		}
	}
}

const ButtonState = {
	Up: 'Up',
	Release: 'Release',
	Down: 'Down',
	Press: 'Press'
};

let mouse = {
	x: 0,
	y: 0,
	state: ButtonState.Up,
};

const areaFromProperties = props => {
	let size = props.size;
	let halfSize = size / 2;
	return {
		min: {
			x: props.position.x - halfSize,
			y: props.position.y - halfSize
		},
		max: {
			x: props.position.x + halfSize,
			y: props.position.y + halfSize
		}
	};
};

class CollisionObject {
	constructor(props, collisionData) {
		this.props = props;
		this.collisionData = collisionData;

		this.size = props.size;
		this.halfSize = props.size / 2;

		this.area = areaFromProperties(props);

		this.bank = props.art.bankIndex;

		this.data = collisionData[this.bank];

		if (this.data == null) {
			console.warn('Collision Data is null')
		}
	}

	pixelPosition(x, y) {
		let pixelX = x - Math.floor(this.props.position.x) + this.halfSize;
		let pixelY = y - Math.floor(this.props.position.y) + this.halfSize;

		return { x: pixelX, y: pixelY };
	}

	isPointOutsideArea(x, y) {
		let position = this.pixelPosition(x, y);
		return position.x < 0 || position.y >= this.size ||
			position.y < 0 || position.y >= this.size;
	}

	isPixelVisible(x, y) {
		let pixelPosition = this.pixelPosition(x, y);
		let index = Math.floor(pixelPosition.y * this.size + pixelPosition.x);

		let alpha = this.data[index * COLOUR_BYTES_COUNT + 3];
		console.assert(alpha !== undefined);
		return alpha !== 0;
	}

	isTouching(other) {
		let commonArea = areaInCommon(this.area, other.area);

		for (let x = commonArea.min.x; x < commonArea.max.x; x++) {
			for (let y = commonArea.min.y; y < commonArea.max.y; y++) {
				let pixel = this.isPixelVisible(x, y);
				let otherPixel = other.isPixelVisible(x, y);
				if (pixel && otherPixel) {
					return true;
				}
			}
		}

		return false;
	}
}

class CollisionArea {
	constructor(area) {
		this.area = cloneArea(area);
		// TODO: ?
		if (this.area.min.x == this.area.max.x) {
			this.area.max.x++;
		}
		if (this.area.min.y == this.area.max.y) {
			this.area.max.y++;
		}
	}

	isPixelVisible() {
		return true;
	}
}

let areaInCommon = (area, otherArea) => {
	return {
		min: {
			x: Math.floor(Math.max(area.min.x, otherArea.min.x)),
			y: Math.floor(Math.max(area.min.y, otherArea.min.y))
		},
		max: {
			x: Math.floor(Math.min(area.max.x, otherArea.max.x)),
			y: Math.floor(Math.min(area.max.y, otherArea.max.y))
		},
	}
};

// TODO: Replace usages of this with .isTouching
function areTouching(properties, index, otherIndex, collisionData) {
	let a = new CollisionObject(properties[index], collisionData);
	let b = new CollisionObject(properties[otherIndex], collisionData);

	let commonArea = areaInCommon(a.area, b.area);

	for (let x = commonArea.min.x; x < commonArea.max.x; x++) {
		for (let y = commonArea.min.y; y < commonArea.max.y; y++) {
			if (a.isPointOutsideArea(x, y) || b.isPointOutsideArea(x, y)) {
				continue;
			}
			if (a.bank in collisionData && b.bank in collisionData) {
				let pixel = a.isPixelVisible(x, y);
				let otherPixel = b.isPixelVisible(x, y);
				if (pixel && otherPixel) {
					return true;
				}
			}
		}
	}

	return false;
}

function attemptToJump(properties, index, area, collisionData, maxJumpAttempts) {
	let props = properties[index];
	attempts_loop: for (let attempts = 0; attempts < maxJumpAttempts; attempts++) {
		props.position = positionInArea(area, props.size);
		object_loop: for (let otherIndex = 0; otherIndex < Mio.OBJECT_COUNT; otherIndex++) {
			if (index === otherIndex) {
				continue object_loop;
			}
			if (properties[otherIndex] === null || properties[otherIndex].position === null) {
				continue object_loop;
			}
			if (areTouching(properties, index, otherIndex, collisionData)) {
				continue attempts_loop;
			}
		}
		break;
	}
}

const hasMadeContact = (props, trigger, collided) => {
	if (trigger.contact === Mio.ContactType.Overlap) {
		return collided;
	} else {
		if (!collided) {
			trigger.wasTouchedPreviousFrame = false;
			return false;
		} else {
			if (trigger.wasTouchedPreviousFrame) {
				return false;
			} else {
				trigger.wasTouchedPreviousFrame = true;
				return true;
			}
		}
	}
}

const timeWithEnd = (gameLength, time) => {
	if (time === Mio.Time.End) {
		if (gameLength === Mio.Length.Short || gameLength === Mio.Length.Boss) {
			return 32;
		} else if (gameLength === Mio.Length.Long) {
			return 64;
		}
	} else {
		return time;
	}
};

function isThisObjectTapped(mouse, collisionPixels, i) {
	if (mouse.state === ButtonState.Press) {
		let pixelX = Math.floor(mouse.x);
		let pixelY = Math.floor(mouse.y);
		let index = Math.floor(pixelY * BACKGROUND_WIDTH + pixelX);
		let objectPixelIsOnTop = collisionPixels[index * COLOUR_BYTES_COUNT] === i;
		let isPixelVisible = collisionPixels[index * COLOUR_BYTES_COUNT + 3] === 255;
		let isTapped = objectPixelIsOnTop && isPixelVisible;
		return isTapped;
	} else {
		return false;
	}
}

function hasHitTime(state, gameLength, trigger) {
	let when = timeWithEnd(gameLength, trigger.when);

	if (when % 2 === 0) {
		when = (when / 2) * 15;
	} else {
		when = Math.floor(when / 2) * 15 + 8;
	}
	console.debug(state.frame, when);
	return when === state.frame;
}

function hasHitRandomTime(state, gameLength, trigger) {
	let fifteenth = state.frame % 15;
	let isQuarter = fifteenth === 0 || (fifteenth % 8 === 0);
	if (trigger.hasBeenTriggered) {
		return false;
	} else if (isQuarter) {
		let start = trigger.start;
		let end = timeWithEnd(gameLength, trigger.end);
		let quarter = fifteenth === 0 ? Math.floor(state.frame / 15) * 2 : Math.floor((state.frame - 1) / 15) * 2 + 1;
		let r = randomIntInRange(Math.max(start, quarter), end + 1);
		let triggered = r === quarter;
		if (triggered) {
			trigger.hasBeenTriggered = true;
		}

		return triggered;
	} else {
		return false;
	}
}

function doesConditionMatchWinStatus(condition, winStatus) {
	if (condition === Mio.GameCondition.Win
		&& winStatus === Mio.GameCondition.Win) {
		return true;
	} else if (condition === Mio.GameCondition.Loss
		&& winStatus === Mio.GameCondition.Loss) {
		return true;
	} else if (condition === Mio.GameCondition.HasBeenWon
		&& (winStatus === Mio.GameCondition.Win
			|| winStatus === Mio.GameCondition.HasBeenWon)) {
		return true;
	} else if (condition === Mio.GameCondition.HasBeenLost
		&& (winStatus === Mio.GameCondition.Loss
			|| winStatus === Mio.GameCondition.HasBeenLost)) {
		return true;
	} else if (condition === Mio.GameCondition.NotYetLost
		&& (winStatus !== Mio.GameCondition.Loss
			&& winStatus !== Mio.GameCondition.HasBeenLost)) {
		return true;
	} else if (condition === Mio.GameCondition.NotYetWon
		&& (winStatus !== Mio.GameCondition.Win
			&& winStatus !== Mio.GameCondition.HasBeenWon)) {
		return true;
	} else {
		return false;
	}
}

function doesSwitchMatch(when, switchState) {
	if (when === Mio.SwitchWhen.IsOn
		&& (switchState === Mio.SwitchWhen.IsOn
			|| switchState === Mio.SwitchWhen.TurnsOn)) {
		return true;
	} else if (when === Mio.SwitchWhen.IsOff
		&& (switchState === Mio.SwitchWhen.IsOff
			|| switchState === Mio.SwitchWhen.TurnsOff)) {
		return true;
	} else if (when === Mio.SwitchWhen.TurnsOn
		&& switchState === Mio.SwitchWhen.TurnsOn) {
		return true;
	} else if (when === Mio.SwitchWhen.TurnsOff
		&& switchState === Mio.SwitchWhen.TurnsOff) {
		return true;
	} else {
		return false;
	}
}

function isTriggered(state, i, trigger, gameData) {
	let props = state.properties[i];
	switch (trigger.tag) {
		case Mio.Trigger.TapAnywhere: {
			return mouse.state === ButtonState.Press;
		}
		case Mio.Trigger.TapThisObject: {
			return isThisObjectTapped(mouse, state.collisionPixels, i);
		}
		case Mio.Trigger.TimeExact: {
			return hasHitTime(state, gameData.length, trigger);
		}
		case Mio.Trigger.TimeRandom: {
			return hasHitRandomTime(state, gameData.length, trigger);
		}
		case Mio.Trigger.Contact: {
			let collisionObject = new CollisionObject(props, gameData.collisionData);
			let other;
			if (trigger.touches.what === Mio.TouchesWhat.Location) {
				other = new CollisionArea(trigger.touches.area);
			} else {
				other = new CollisionObject(state.properties[trigger.touches.index], gameData.collisionData);
			}
			let collided = collisionObject.isTouching(other);
			return hasMadeContact(props, trigger, collided);
		}
		case Mio.Trigger.Switch: {
			let when = trigger.switchWhen;
			let switchState = state.properties[trigger.index].switchState;
			return doesSwitchMatch(when, switchState);
		}
		case Mio.Trigger.FinishesPlaying: {
			return props.art.finishedPlaying;
		}
		case Mio.Trigger.SpecificArt: {
			return props.art.artIndex === trigger.index;
		}
		case Mio.Trigger.GameCondition: {
			let condition = trigger.condition;
			let winStatus = state.winStatus;
			return doesConditionMatchWinStatus(condition, winStatus);
		}
		default: {
			console.warn('Unreachable Mio.Trigger');
		}
	}
}

const possibleDirections = [
	Mio.SpecificDirection.North,
	Mio.SpecificDirection.NorthEast,
	Mio.SpecificDirection.East,
	Mio.SpecificDirection.SouthEast,
	Mio.SpecificDirection.South,
	Mio.SpecificDirection.SouthWest,
	Mio.SpecificDirection.West,
	Mio.SpecificDirection.NorthWest
];

let velocityFromDirection = (direction, speed) => {
	let diagonalSpeed = speed / Math.sqrt(2);
	switch (direction) {
		case Mio.SpecificDirection.North: {
			return { x: 0, y: -speed };
		}
		case Mio.SpecificDirection.NorthEast: {
			return { x: diagonalSpeed, y: -diagonalSpeed };
		}
		case Mio.SpecificDirection.East: {
			return { x: speed, y: 0 };
		}
		case Mio.SpecificDirection.SouthEast: {
			return { x: diagonalSpeed, y: diagonalSpeed };
		}
		case Mio.SpecificDirection.South: {
			return { x: 0, y: speed };
		}
		case Mio.SpecificDirection.SouthWest: {
			return { x: -diagonalSpeed, y: diagonalSpeed };
		}
		case Mio.SpecificDirection.West: {
			return { x: -speed, y: 0 };
		}
		case Mio.SpecificDirection.NorthWest: {
			return { x: -diagonalSpeed, y: -diagonalSpeed };
		}
	}
};

function clonePosition(position) {
	return { x: position.x, y: position.y };
}

function cloneArea(area) {
	return { min: clonePosition(area.min), max: clonePosition(area.max) };
}

function goStraightTravel(action, state) {
	let fromPosition = null;
	if (action.from.tag === Mio.FromLocation.AnotherPosition) {
		fromPosition = clonePosition(action.from.position);
	} else if (action.from.tag === Mio.FromLocation.AnotherObject) {
		// TODO: Is this done from the position at the start of the frame?
		fromPosition = clonePosition(state.properties[action.from.index].position);
		fromPosition.x += action.from.offset.x;
		fromPosition.y += action.from.offset.y;
	}
	let speed = valueFromSpeed(action.speed);
	let travel;
	if (action.direction.tag === Mio.Direction.Random) {
		let direction = randomInArray(possibleDirections);
		let velocity = velocityFromDirection(direction, speed);
		travel = { tag: ActiveTravel.GoStraight, velocity, fromPosition };
	} else if (action.direction.tag === Mio.Direction.Specific) {
		let direction = action.direction.direction;
		let velocity = velocityFromDirection(direction, speed);
		travel = { tag: ActiveTravel.GoStraight, velocity, fromPosition };
	} else {
		let position = action.direction.position;
		travel = { tag: ActiveTravel.GoToPoint, position, speed, fromPosition };
	}
	return travel;
}

function jumpToAreaTravel(action, props, collisionArea) {
	let area = cloneArea(action.area);
	area.min.x -= collisionArea.min.x;
	area.min.y -= collisionArea.min.y;
	area.max.x += props.size - collisionArea.max.x;
	area.max.y += props.size - collisionArea.max.y;
	return { tag: ActiveTravel.JumpToArea, area, overlap: action.overlap };
}

function roamTravel(action, state, props, collisionArea) {
	let speed = valueFromSpeed(action.speed);
	let direction = randomInArray(possibleDirections);
	let velocity = velocityFromDirection(direction, speed);
	let area = cloneArea(action.area);
	let halfSize = props.size / 2;
	area.min.x += halfSize;
	area.min.y += halfSize;
	area.max.x -= halfSize;
	area.max.y -= halfSize;

	area.min.x -= collisionArea.min.x;
	area.min.y -= collisionArea.min.y;
	area.max.x += props.size - collisionArea.max.x;
	area.max.y += props.size - collisionArea.max.y;
	let overlap = action.overlap;
	let travel;
	let roam = action.roam;
	let tag = ActiveTravel.Roam;
	let lastTravel = props.travel[props.travel.length - 1];
	if (roam === Mio.Roam.Wiggle) {
		travel = { tag, roam, area, speed, overlap };
	} else if (roam === Mio.Roam.Insect) {
		if (lastTravel.roam === Mio.Roam.Insect) {
			velocity = lastTravel.velocity;
		}
		travel = { tag, roam, area, speed, overlap, velocity };
	} else if (roam === Mio.Roam.Reflect) {

		//let initialSpeed = randomInRange(0, 1) >= 0.5 ? speed : -speed;
		if (area.min.x < area.max.x && area.min.y < area.max.y) {
			let angle = randomInRange(0, Math.PI * 2);
			velocity = { x: speed * Math.cos(angle), y: speed * Math.sin(angle) };
		} else if (area.min.x > area.max.x) {
			//velocity = { x: 0, y: initialSpeed };
		} else {
			//velocity = { x: initialSpeed, y: 0 };
		}
		let angle = randomInRange(0, Math.PI * 2);
		velocity = { x: speed * Math.cos(angle), y: speed * Math.sin(angle) };
		if (lastTravel.tag === ActiveTravel.GoStraight) {
			// TODO: Adjust for speed
			velocity = clonePosition(lastTravel.velocity);
			let d = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));
			velocity.x = velocity.x / d * speed;
			velocity.y = velocity.y / d * speed;
		}
		travel = { tag, roam, area, speed, overlap, velocity };
	} else if (roam === Mio.Roam.Bounce) {
		let acceleration = speed / 16;

		let velocity = {
			x: 0,
			y: props.position.y > area.min.y ? -Math.sqrt(2 * acceleration * (props.position.y - area.min.y)) : 0.0
		};
		if ((props.position.x < area.min.x || props.position.x > area.max.x) && (props.position.y < area.max.y) && area.max.x > area.min.x) {
			velocity.y = 0.0;
		}
		let direction = randomInArray([BounceDirection.Left, BounceDirection.Right]);
		let horizontalSpeed = speed / 2;
		if (direction === BounceDirection.Left) {
			velocity.x = horizontalSpeed;
		} else {
			velocity.x -= horizontalSpeed;
		}

		if (lastTravel.tag === ActiveTravel.GoStraight) {
			// TODO: Add velocity to GoToPoint to use here? or just calc now. and check if gotopoint is called same frame as bounce in game this affects before thought
			//velocity.x = lastTravel.velocity.x;
			//velocity.y = lastTravel.velocity.y || velocity.y;
			velocity = clonePosition(lastTravel.velocity);

		} else if (lastTravel.tag === ActiveTravel.GoToPoint) {
			let position = lastTravel.position;
			let targetVector = { x: position.x - props.position.x, y: position.y - props.position.y };
			let d = Math.sqrt(Math.pow(targetVector.x, 2) + Math.pow(targetVector.y, 2));
			velocity = {
				x: targetVector.x / d * speed / 2,
				y: targetVector.y / d * speed
			};
		} else if (lastTravel.tag === ActiveTravel.Roam && (lastTravel.roam === Mio.Roam.Bounce || lastTravel.roam === Mio.Roam.Reflect)) {
			velocity = clonePosition(lastTravel.velocity);
		} else if (lastTravel.tag === ActiveTravel.GoToObject) {
			let position = state.properties[lastTravel.index].position;
			let targetVector = { x: position.x - props.position.x, y: position.y - props.position.y };
			let d = Math.sqrt(Math.pow(targetVector.x, 2) + Math.pow(targetVector.y, 2));
			velocity = {
				x: targetVector.x / d * speed,
				y: targetVector.y / d * speed
			};
		}
		travel = { tag, roam, area, speed, overlap, velocity, acceleration };
	}

	return travel;
}

function pushToTravelQueue(action, state, props, collisionArea) {
	switch (action.travel) {
		case Mio.Travel.GoStraight: {
			let travel = goStraightTravel(action, state);
			props.travel.push(travel);
			return;
		}
		case Mio.Travel.Stop: {
			props.travel.push({ tag: ActiveTravel.Stop });
			return;
		}
		case Mio.Travel.JumpToPosition: {
			props.travel.push({ tag: ActiveTravel.JumpToPosition, position: clonePosition(action.position) });
			props.travel.push({ tag: ActiveTravel.Stop });
			return;
		}
		case Mio.Travel.JumpToArea: {
			let travel = jumpToAreaTravel(action, props, collisionArea);
			props.travel.push(travel);
			props.travel.push({ tag: ActiveTravel.Stop });
			return;
		}
		case Mio.Travel.JumpToObject: {
			props.travel.push({ tag: ActiveTravel.AttachTo, index: action.index, offset: action.offset });
			return;
		}
		case Mio.Travel.Roam: {
			let travel = roamTravel(action, state, props, collisionArea);
			props.travel.push(travel);
			return;
		}
		case Mio.Travel.Swap: {
			props.travel.push({ tag: ActiveTravel.Swap, index: action.index });
			props.travel.push({ tag: ActiveTravel.Stop });
			state.properties[action.index].travel.push({ tag: ActiveTravel.Stop });
			return;
		}
		case Mio.Travel.Target: {
			let index = action.index;
			let offset = action.offset;
			let speed = valueFromSpeed(action.speed);
			props.travel.push({ tag: ActiveTravel.GoToObject, index, offset, speed });
			return;
		}
		default: {
			console.warn('Unreachable Mio.Travel', action.travel);
			return;
		}
	}
}

function applyAction(state, i, action, gameData, assets) {
	let props = state.properties[i];
	switch (action.tag) {
		case Mio.Action.Travel: {
			let artIndex = props.art.artIndex;
			let collisionArea = gameData.objects[i].art[artIndex].collisionArea;
			pushToTravelQueue(action, state, props, collisionArea);
			return;
		}
		case Mio.Action.Switch: {
			let newSwitch;
			if (action.switchTo === Mio.Switch.Off) {
				newSwitch = Mio.SwitchWhen.TurnsOff;
			} else {
				newSwitch = Mio.SwitchWhen.TurnsOn;
			}
			console.debug(state.frame, i, newSwitch);
			props.nextSwitchState = newSwitch;
			return;
		}
		case Mio.Action.Lose: {
			console.log('Lose Action Applied. winStatus before: {:?}', state.winStatus);
			if (
				state.winStatus !== Mio.GameCondition.Win &&
				state.winStatus !== Mio.GameCondition.Loss &&
				state.winStatus !== Mio.GameCondition.HasBeenLost &&
				state.winStatus !== Mio.GameCondition.HasBeenWon
			) {
				randomInArray(assets.loseSounds).play();
				state.winStatus = Mio.GameCondition.Loss;
			}
			return;
		}
		case Mio.Action.StopPlaying: {
			props.art.style = Mio.AnimationStyle.Hold;
			return;
		}
		case Mio.Action.ChangeArt: {
			props.art.artIndex = action.index;
			let art = gameData.objects[i].art[action.index];
			let bank = art.bank[0];
			props.art.bankIndex = bank;
			props.art.animationIndex = 0;
			props.art.finishedPlaying = false;
			props.art.timeToNextChange = animationTimeFromSpeed(action.speed);
			props.art.speed = action.speed;
			props.art.style = action.style;
			if (art.bank.length === 1) {
				props.art.style = Mio.AnimationStyle.Hold;
			}
			return;
		}
		case Mio.Action.SoundEffect: {
			let sound = assets.sounds[action.effect];
			if (sound.paused) {
				sound.play();
			} else if (sound.currentTime > 0.025) {
				sound.pause();
				sound.currentTime = 0;
				sound.play();
			}

			return;
		}
		case Mio.Action.ScreenEffect: {
			// TODO: Implement others
			if (action.effect === Mio.ScreenEffect.Freeze) {
				state.isFrozen = true;
			}
			return;
		}
	}
}

function triggeredActionsThisFrame(state, gameData) {
	let triggeredActions = [];
	for (let i = 0; i < gameData.objects.length; i++) {
		triggeredActions.push([]);
		if (gameData.objects[i] === null) continue;
		let object = gameData.objects[i];
		for (let ins = 0; ins < object.instructions.length; ins++) {
			// To avoid short-circuiting as game logic requires collision checking for touches trigger
			let triggered = object.instructions[ins].triggers
				.map(trigger => isTriggered(state, i, trigger, gameData))
				.every(result => result === true);
			if (triggered) {
				let actions = object.instructions[ins].actions;
				triggeredActions[i] = triggeredActions[i].concat(actions);
			}
		}
	}

	return triggeredActions;
}

function applyAllActions(triggeredActions, state, gameData, assets) {
	for (let i = 0; i < triggeredActions.length; i++) {
		triggeredActions[i].forEach(action => applyAction(state, i, action, gameData, assets));
	}
}

function updateAnimations(state, gameData) {
	for (let i = 0; i < gameData.objects.length; i++) {
		if (gameData.objects[i] === null) continue;
		let object = gameData.objects[i];
		let props = state.properties[i];

		let art = object.art[props.art.artIndex]
		let animationIndex = props.art.animationIndex;
		animationIndex++;
		animationIndex %= art.bank.length;

		let bank = art.bank[animationIndex];

		props.art.finishedPlaying = false;

		let goToNextImage = props => {
			props.art.animationIndex = animationIndex;
			props.art.bankIndex = bank;
			props.art.timeToNextChange = animationTimeFromSpeed(props.art.speed);
		};

		if (props.art.style !== Mio.AnimationStyle.Hold) {
			props.art.timeToNextChange--;
		}

		if (props.art.style !== Mio.AnimationStyle.Hold && props.art.timeToNextChange <= 0) {
			if (animationIndex === 0) {
				if (props.art.style === Mio.AnimationStyle.Loop) {
					goToNextImage(props);
				} else if (props.art.style === Mio.AnimationStyle.PlayOnce) {
					props.art.style = Mio.AnimationStyle.Hold;
					props.art.finishedPlaying = true;
				}
			} else {
				goToNextImage(props);
			}
		}
	}
}

function moveObjects(state, gameData) {
	for (let i = 0; i < gameData.objects.length; i++) {
		if (gameData.objects[i] === null) continue;
		let props = state.properties[i];
		for (let t = 0; t < props.travel.length; t++) {
			let travel = props.travel[t];

			if (t < props.travel.length - 1
				&& (travel.tag === ActiveTravel.GoStraight
					|| travel.tag === ActiveTravel.GoToPoint
					|| travel.tag === ActiveTravel.GoToObject
					|| travel.tag === ActiveTravel.Roam
					|| travel.tag === ActiveTravel.Stop)) {
				continue;
			}

			let moveCoordinateTo = (x, other, velocity) => {
				if (Math.abs(x - other) > Math.abs(velocity)) {
					return x + velocity;
				} else {
					return other;
				}
			};
			let moveToward = (props, position) => {
				let targetVector = { x: position.x - props.position.x, y: position.y - props.position.y };
				let d = Math.sqrt(Math.pow(targetVector.x, 2) + Math.pow(targetVector.y, 2));
				let velocity = {
					x: targetVector.x / d * travel.speed,
					y: targetVector.y / d * travel.speed
				};
				props.position = {
					x: moveCoordinateTo(props.position.x, position.x, velocity.x),
					y: moveCoordinateTo(props.position.y, position.y, velocity.y)
				};
				return velocity;
			};

			switch (travel.tag) {
				case ActiveTravel.JumpToPosition: {
					props.position = clonePosition(travel.position);
					break;
				}
				case ActiveTravel.JumpToArea: {
					if (travel.overlap === Mio.Overlap.Anywhere) {
						props.position = positionInArea(travel.area, props.size);
					} else {
						attemptToJump(state.properties, i, travel.area, gameData.collisionData, MAX_DURING_GAME_JUMP_ATTEMPTS);
					}
					break;
				}
				case ActiveTravel.Swap: {
					let temp = clonePosition(props.position);
					props.position = clonePosition(state.properties[travel.index].position);
					state.properties[travel.index].position = temp;
					break;
				}
				case ActiveTravel.GoStraight: {
					if (travel.fromPosition != null) {
						props.position = travel.fromPosition;
						travel.fromPosition = null;
					}
					props.position.x += travel.velocity.x;
					props.position.y += travel.velocity.y;
					break;
				}
				case ActiveTravel.GoToPoint: {
					if (travel.fromPosition != null) {
						props.position = travel.fromPosition;
						travel.fromPosition = null;
					}
					let position = clonePosition(travel.position);
					moveToward(props, position);
					break;
				}
				case ActiveTravel.GoToObject: {
					let position = clonePosition(state.properties[travel.index].position);
					position.x += travel.offset.x;
					position.y += travel.offset.y;
					moveToward(props, position);
					break;
				}
				case ActiveTravel.AttachTo: {
					let position = clonePosition(state.properties[travel.index].position);
					position.x += travel.offset.x;
					position.y += travel.offset.y;
					props.position = position;
					break;
				}
				case ActiveTravel.Roam: {
					let area = travel.area;
					let centre = { x: (area.min.x + area.max.x) / 2, y: (area.min.y + area.max.y) / 2 };
					let isPositionInArea = (position, area) => {
						return position.x >= area.min.x && position.x <= area.max.x
							&& position.y >= area.min.y && position.y <= area.max.y;
					};
					let isPositionInExtendedArea = (position, area) => {
						if (area.min.x <= area.max.x && area.min.y <= area.max.y) {
							return position.x >= area.min.x && position.x <= area.max.x
								&& position.y >= area.min.y && position.y <= area.max.y;
						}
						if (area.min.x > area.max.x) {
							return position.x.toFixed(2) === ((area.min.x + area.max.x) / 2).toFixed(2)
								&& position.y >= area.min.y && position.y <= area.max.y;
						}
						if (area.min.y > area.max.y) {
							return position.x >= area.min.x && position.x <= area.max.x
								&& position.y.toFixed(2) === ((area.min.y + area.max.y) / 2).toFixed(2);
						}
					};
					if (travel.roam === Mio.Roam.Wiggle) {
						if (isPositionInArea(props.position, area)) {
							let directions = possibleDirections;
							if (travel.overlap === Mio.Overlap.TryNotToOverlap) {
								let position = clonePosition(props.position);
								let nonOverlappingDirections = [];
								direction_loop: for (let d = 0; d < possibleDirections.length; d++) {
									props.position = clonePosition(position);
									let direction = possibleDirections[d];
									let velocity = velocityFromDirection(direction, travel.speed);
									props.position.x += velocity.x;
									props.position.y += velocity.y;
									object_loop: for (let otherIndex = 0; otherIndex < Mio.OBJECT_COUNT; otherIndex++) {
										if (i === otherIndex) {
											continue object_loop;
										}
										if (state.properties[otherIndex] === null || state.properties[otherIndex].position === null) {
											continue object_loop;
										}
										if (areTouching(state.properties, i, otherIndex, gameData.collisionData)) {
											continue direction_loop;
										}
									}

									nonOverlappingDirections.push(direction);
								}
								if (nonOverlappingDirections.length === 0) {
									directions = possibleDirections;
								} else {
									directions = nonOverlappingDirections;
								}

								props.position = clonePosition(position);
							}
							let direction = randomInArray(directions);
							let velocity = velocityFromDirection(direction, travel.speed);

							props.position.x += velocity.x;
							props.position.y += velocity.y;
						} else if (area.min.x > area.max.x || area.min.y > area.max.y) {
							// TODO: Duplicate code
							if (area.min.x > area.max.x || area.min.y > area.max.y) {
								area = cloneArea(area);
								area.min.x -= gameData.objects[i].spriteSize / 2;
								area.min.y -= gameData.objects[i].spriteSize / 2;
								area.max.x += gameData.objects[i].spriteSize / 2;
								area.max.y += gameData.objects[i].spriteSize / 2;
							}
							if (isPositionInArea(props.position, area)) {
								let directions = possibleDirections;
								if (travel.overlap === Mio.Overlap.TryNotToOverlap) {
									let position = clonePosition(props.position);
									let nonOverlappingDirections = [];
									direction_loop: for (let d = 0; d < possibleDirections.length; d++) {
										props.position = clonePosition(position);
										let direction = possibleDirections[d];
										let velocity = velocityFromDirection(direction, travel.speed);
										props.position.x += velocity.x;
										props.position.y += velocity.y;
										object_loop: for (let otherIndex = 0; otherIndex < Mio.OBJECT_COUNT; otherIndex++) {
											if (i === otherIndex) {
												continue object_loop;
											}
											if (state.properties[otherIndex] === null || state.properties[otherIndex].position === null) {
												continue object_loop;
											}
											if (areTouching(state.properties, i, otherIndex, gameData.collisionData)) {
												continue direction_loop;
											}
										}

										nonOverlappingDirections.push(direction);
									}
									if (nonOverlappingDirections.length === 0) {
										directions = possibleDirections;
									} else {
										directions = nonOverlappingDirections;
									}

									props.position = clonePosition(position);
								}
								let direction = randomInArray(directions);
								let velocity = velocityFromDirection(direction, travel.speed);

								props.position.x += velocity.x;
								props.position.y += velocity.y;
							} else {
								moveToward(props, centre);
							}
						} else {
							moveToward(props, centre);
						}

					} else if (travel.roam === Mio.Roam.Insect) {
						if (isPositionInArea(props.position, area)) {
							const CHANGE_DIRECTION_PROBABILTY = 0.05;
							if (randomInRange(0, 1) < CHANGE_DIRECTION_PROBABILTY) {
								let direction = randomInArray(possibleDirections);
								travel.velocity = velocityFromDirection(direction, travel.speed);
							}
							props.position.x += travel.velocity.x;
							props.position.y += travel.velocity.y;
						} else {
							let direction = randomInArray(possibleDirections);
							travel.velocity = velocityFromDirection(direction, travel.speed);
							moveToward(props, centre);
						}
					} else if (travel.roam === Mio.Roam.Reflect) {
						if (travel.overlap === Mio.Overlap.TryNotToOverlap) {
							let touching = false;
							let touchingIndex;
							object_loop: for (let otherIndex = 0; otherIndex < Mio.OBJECT_COUNT; otherIndex++) {
								if (i === otherIndex) {
									continue object_loop;
								}
								if (state.properties[otherIndex] === null || state.properties[otherIndex].position === null) {
									continue object_loop;
								}
								if (areTouching(state.properties, i, otherIndex, gameData.collisionData)) {
									touchingIndex = otherIndex;
									touching = true;
								}
							}
							if (touching) {
								if (props.position.x < state.properties[touchingIndex].position.x) {
									travel.velocity.x = -Math.abs(travel.velocity.x);
								}
								if (props.position.x > state.properties[touchingIndex].position.x) {
									travel.velocity.x = Math.abs(travel.velocity.x);
								}
								if (props.position.y < state.properties[touchingIndex].position.y) {
									travel.velocity.y = -Math.abs(travel.velocity.y);
								}
								if (props.position.y > state.properties[touchingIndex].position.y) {
									travel.velocity.y = Math.abs(travel.velocity.y);
								}
							}
						}
						if (isPositionInExtendedArea(props.position, area)) {
							if (Math.floor(props.position.x) > area.max.x) {
								travel.velocity.x = -Math.abs(travel.velocity.x);
							}
							if (props.position.x < area.min.x) {
								travel.velocity.x = Math.abs(travel.velocity.x);
							}
							if (Math.floor(props.position.y) > area.max.y) {
								travel.velocity.y = -Math.abs(travel.velocity.y);
							}
							if (props.position.y < area.min.y) {
								travel.velocity.y = Math.abs(travel.velocity.y);
							}

							// When area is smaller than object
							if (props.position.x >= area.max.x && props.position.x <= area.min.x) {
								travel.velocity.x = 0;
								travel.velocity.y = travel.velocity.y > 0 ? travel.speed : -travel.speed;

								//props.position.x = (area.min.x + area.max.x) / 2.0;
							}
							if (props.position.y >= area.max.y && props.position.y <= area.min.y) {
								travel.velocity.y = 0;
								travel.velocity.x = travel.velocity.x > 0 ? travel.speed : -travel.speed;
								//props.position.y = (area.min.y + area.max.y) / 2.0;
							}
							props.position.x += travel.velocity.x;
							props.position.y += travel.velocity.y;
						} else {
							// TODO: Does this cause problems when velocity is specifically set using GoStraight?
							travel.velocity = moveToward(props, centre);
						}
					} else if (travel.roam === Mio.Roam.Bounce) {
						// TODO: Implement TryNotToOverlap (properly) for bounce
						if (travel.overlap === Mio.Overlap.TryNotToOverlap) {
							let touching = false;
							let touchingIndex;
							object_loop: for (let otherIndex = 0; otherIndex < Mio.OBJECT_COUNT; otherIndex++) {
								if (i === otherIndex) {
									continue object_loop;
								}
								if (state.properties[otherIndex] === null || state.properties[otherIndex].position === null) {
									continue object_loop;
								}
								if (areTouching(state.properties, i, otherIndex, gameData.collisionData)) {
									touchingIndex = otherIndex;
									touching = true;
								}
							}
							if (touching) {
								if (Math.abs(props.position.x - state.properties[touchingIndex].position.x) > Math.abs(props.position.y - state.properties[touchingIndex].position.y)) {
									if (props.position.x < state.properties[touchingIndex].position.x) {
										travel.velocity.x = -Math.abs(travel.velocity.x);
									}
									if (props.position.x > state.properties[touchingIndex].position.x) {
										travel.velocity.x = Math.abs(travel.velocity.x);
									}
								} else {
									if (props.position.y < state.properties[touchingIndex].position.y) {
										// Dunno why I put this as it
										travel.velocity.y = props.position.y > travel.area.min.y ? -Math.sqrt(2 * travel.acceleration * (travel.area.max.y - travel.area.min.y)) : 0.0;
									}
									if (props.position.y > state.properties[touchingIndex].position.y) {
										travel.velocity.y = 0;
									}
								}
							}
						}
						if (props.position.y < area.min.y) {
							// TODO: Why is abs necessary?
							travel.velocity.y += Math.abs(travel.acceleration);
						} else if (props.position.y <= area.max.y) {
							travel.velocity.y += travel.acceleration;
						} else if (Math.floor(props.position.y) > area.max.y) {
							travel.velocity.y = props.position.y > travel.area.min.y ? -Math.sqrt(2 * travel.acceleration * (props.position.y - travel.area.min.y)) : 0.0;
						}
						if (Math.floor(props.position.x) > area.max.x) {
							travel.velocity.x = -Math.abs(travel.velocity.x);
						} else if (Math.floor(props.position.x) < area.min.x) {
							travel.velocity.x = Math.abs(travel.velocity.x);
						}
						let horizontalSpeed = travel.speed / 2;
						if (area.min.x >= area.max.x) {
							let centreX = (area.min.x + area.max.x) / 2.0
							if (props.position.x > centreX) {
								horizontalSpeed = -horizontalSpeed;
							}
							props.position.x = moveCoordinateTo(props.position.x, centreX, horizontalSpeed);
						} else {
							props.position.x += travel.velocity.x;
						}
						props.position.y += travel.velocity.y;
					}
					break;
				}
			}
		}

		props.travel = [props.travel[props.travel.length - 1]];
	}

	for (let i = 0; i < gameData.objects.length; i++) {
		if (gameData.objects[i] === null) continue;
		let props = state.properties[i];
		let travel = props.travel[0];
		if (travel.tag === ActiveTravel.AttachTo) {
			let position = clonePosition(state.properties[travel.index].position);
			position.x += travel.offset.x;
			position.y += travel.offset.y;
			props.position = position;
		}
	}
}

function updateSwitchStates(properties) {
	for (let i = 0; i < properties.length; i++) {
		let props = properties[i];
		if (props === null) continue;
		if (props.switchState === Mio.SwitchWhen.TurnsOff) {
			props.switchState = Mio.SwitchWhen.IsOff;
		} else if (props.switchState === Mio.SwitchWhen.TurnsOn) {
			props.switchState = Mio.SwitchWhen.IsOn;
		}
		if (props.nextSwitchState === Mio.SwitchWhen.TurnsOn && props.switchState === Mio.SwitchWhen.IsOff) {
			props.switchState = Mio.SwitchWhen.TurnsOn;
		}
		if (props.nextSwitchState === Mio.SwitchWhen.TurnsOff && props.switchState === Mio.SwitchWhen.IsOn) {
			props.switchState = Mio.SwitchWhen.TurnsOff;
		}
	}
}

function winGameIfConditionsAreMet(state, gameData, oldWinStatus, winSounds) {
	if (Mio.GameCondition.Win === oldWinStatus) {
		state.winStatus = Mio.GameCondition.HasBeenWon;
	} else if (Mio.GameCondition.Loss === oldWinStatus) {
		state.winStatus = Mio.GameCondition.HasBeenLost;
	}

	if (state.winStatus === Mio.GameCondition.NotYetWon) {
		for (let conditionIndex = 0; conditionIndex < gameData.winConditions.length; conditionIndex++) {
			let conditions = gameData.winConditions[conditionIndex];
			let won = null;
			for (let which = 0; which < conditions.length; which++) {
				let winCondition = conditions[which];
				let switchWhen = winCondition.switchState;
				let props = state.properties[winCondition.index];
				let switchMatchesCondition;
				if (switchWhen === Mio.Switch.On
					&& (props.switchState === Mio.SwitchWhen.IsOn
						|| props.switchState === Mio.SwitchWhen.TurnsOn)) {
					switchMatchesCondition = true;
				} else if (switchWhen === Mio.Switch.Off
					&& (props.switchState === Mio.SwitchWhen.IsOff
						|| props.switchState === Mio.SwitchWhen.TurnsOff)) {
					switchMatchesCondition = true;
				} else {
					switchMatchesCondition = false;
				}
				if (won !== null) {
					won = won && switchMatchesCondition;
				} else {
					won = switchMatchesCondition;
				}
			}

			if (won === true) {
				console.log('Game Won');
				randomInArray(winSounds).play();
				state.winStatus = Mio.GameCondition.Win;
			}
		}
	}
}

function loseIfOutOfTime(state, gameData, loseSounds) {
	let end;
	if (gameData.length === Mio.Length.Short) {
		end = 32;
	} else if (gameData.length === Mio.Length.Long) {
		end = 64;
	}
	if (gameData.length !== Mio.Length.Boss) {
		if (state.frame === end * 7.5) {
			if (state.winStatus !== Mio.GameCondition.Win
				&& state.winStatus !== Mio.GameCondition.Loss
				&& state.winStatus !== Mio.GameCondition.HasBeenLost
				&& state.winStatus !== Mio.GameCondition.HasBeenWon) {
				randomInArray(loseSounds).play();
				state.winStatus = Mio.GameCondition.Loss;
				console.log('Ran out of time');
			}
		}
	}
}



const letterSpacing = {
	[' ']: 4,
	['!']: 4,
	['"']: 8,
	["#"]: 15,
	['$']: 15,
	['%']: 15,
	['\'']: 5,
	['(']: 8,
	[')']: 8,
	['*']: 13,
	['+']: 13,
	[',']: 5,
	['-']: 13,
	['.']: 5,
	['/']: 15,
	['0']: 15,
	['1']: 10,
	['2']: 14,
	['3']: 14,
	['4']: 14,
	['5']: 14,
	['6']: 14,
	['7']: 14,
	['8']: 14,
	['9']: 14,
	[':']: 5,
	[';']: 5,
	['<']: 14,
	['=']: 13,
	['>']: 14,
	['?']: 13,
	['@']: 16,
	['A']: 15,
	['B']: 15,
	['C']: 15,
	['D']: 14,
	['E']: 15,
	['F']: 14,
	['G']: 15,
	['H']: 15,
	['I']: 13,
	['J']: 15,
	['K']: 14,
	['L']: 14,
	['M']: 17,
	['N']: 15,
	['O']: 15,
	['P']: 15,
	['Q']: 15,
	['R']: 14,
	['S']: 14,
	['T']: 15,
	['U']: 14,
	['V']: 15,
	['W']: 16,
	['X']: 16,
	['Y']: 15,
	['Z']: 14,
	['[']: 8,
	[']']: 8,
	['a']: 9,
	['b']: 9,
	['c']: 9,
	['d']: 9,
	['e']: 9,
	['f']: 9,
	['g']: 9,
	['h']: 9,
	['i']: 5,
	['j']: 9,
	['k']: 9,
	['l']: 6,
	['m']: 9,
	['n']: 9,
	['o']: 9,
	['p']: 9,
	['q']: 9,
	['r']: 9,
	['s']: 9,
	['t']: 9,
	['u']: 9,
	['v']: 9,
	['w']: 9,
	['x']: 9,
	['y']: 9,
	['z']: 9,
	['~']: 11,
	['À']: 15,
	['Á']: 15,
	['Â']: 15,
	['Ä']: 15,
	['È']: 15,
	['É']: 15,
	['Ê']: 15,
	['Ë']: 15,
	['Ì']: 13,
	['Í']: 13,
	['Î']: 13,
	['Ï']: 13,
	['Ò']: 15,
	['Ó']: 15,
	['Ô']: 15,
	['Ö']: 15,
	['Œ']: 16,
	['Ù']: 14,
	['Ú']: 14,
	['Û']: 14,
	['Ü']: 14,
	['Ç']: 14,
	['Ñ']: 15,
	['à']: 9,
	['á']: 9,
	['â']: 9,
	['ä']: 9,
	['è']: 9,
	['é']: 9,
	['ê']: 9,
	['ë']: 9,
	['ì']: 9,
	['í']: 9,
	['î']: 9,
	['ï']: 9,
	['ò']: 9,
	['ó']: 9,
	['ô']: 9,
	['ö']: 9,
	['œ']: 9,
	['ù']: 9,
	['ú']: 9,
	['û']: 9,
	['ü']: 9,
	['ç']: 9,
	['ñ']: 9,
	['ß']: 14,
	['£']: 13,
	['€']: 13,
	['܀']: 15,
	['܁']: 15,
	['܂']: 15,
	['܃']: 15,
	['܄']: 15,
	['܅']: 15,
	["܆"]: 15,
	["܇"]: 15,
	["܈"]: 15,
	["܉"]: 15,
	["܊"]: 15,
	["܋"]: 15,
	["܌"]: 15,
	["܍"]: 15,
	["܎"]: 15,
	["܏"]: 15,
	["ܐ"]: 15,
	["ܑ"]: 15,
	["ܒ"]: 15,
	["ܓ"]: 17,
	["ܔ"]: 17,
	["ܕ"]: 17,
	["ܖ"]: 13,
	["ܗ"]: 13,
};

function indexInFontBitmap(letter) {
	const conversionMap = {
		['À']: 128,
		['Á']: 129,
		['Â']: 130,
		['Ä']: 131,
		['È']: 132,
		['É']: 133,
		['Ê']: 134,
		['Ë']: 135,
		['Ì']: 136,
		['Í']: 137,
		['Î']: 138,
		['Ï']: 139,
		['Ò']: 140,
		['Ó']: 141,
		['Ô']: 142,
		['Ö']: 143,
		['Œ']: 144,
		['Ù']: 145,
		['Ú']: 146,
		['Û']: 147,
		['Ü']: 148,
		['Ç']: 149,
		['Ñ']: 150,
		['à']: 151,
		['á']: 152,
		['â']: 153,
		['ä']: 154,
		['è']: 155,
		['é']: 156,
		['ê']: 157,
		['ë']: 158,
		['ì']: 159,
		['í']: 160,
		['î']: 161,
		['ï']: 162,
		['ò']: 163,
		['ó']: 164,
		['ô']: 165,
		['ö']: 166,
		['œ']: 167,
		['ù']: 168,
		['ú']: 169,
		['û']: 170,
		['ü']: 171,
		['ç']: 172,
		['ñ']: 173,
		['ß']: 174,
		['£']: 176,
		['€']: 177,
		['܀']: 1,
		['܁']: 2,
		['܂']: 3,
		['܃']: 4,
		['܄']: 5,
		['܅']: 6,
		["܆"]: 7,
		["܇"]: 8,
		["܈"]: 9,
		["܉"]: 10,
		["܊"]: 11,
		["܋"]: 12,
		["܌"]: 13,
		["܍"]: 14,
		["܎"]: 15,
		["܏"]: 16,
		["ܐ"]: 17,
		["ܑ"]: 18,
		["ܒ"]: 19,
		["ܓ"]: 20,
		["ܔ"]: 21,
		["ܕ"]: 22,
		["ܖ"]: 23,
		["ܗ"]: 24,
	};
	let code = conversionMap[letter];
	return code !== undefined ? code : letter.charCodeAt(0);
}


let audioNames = [
	'explosion',
	'glass',
	'gong',
	'spring',
	'pistol',
	'slice',
	'camera',
	'splash',
	'correct',
	'incorrect',
	'switch',
	'input',
	'falling',
	'wiggle',
	'rising',
	'victory',
	'batting',
	'swing',
	'impact',
	'kick',
	'racquet',
	'bowling',
	'sunk_putt',
	'whistle',
	'frying_pan',
	'bell',
	'knife_chop',
	'mobile_phone',
	'razor',
	'mobile_phone',
	'popped_cork',
	'water',
	'sneeze',
	'snap',
	'munching',
	'gulp',
	'punch',
	'foot_stamp',
	'gasp',
	'applause',
	'cat',
	'big_dog',
	'pig',
	'small_dog',
	'wolf',
	'crow',
	'tiger',
	'wing_flap',
	'baby',
	'giggle',
	'scream',
	'too_bad',
	'kung_fu',
	'lets_fight',
	'cheering',
	'booing',
	'mario_jump',
	'coin',
	'power_up',
	'power_down',
	'shell_kick',
	'cannon',
	'struck',
	'barrel_hop',
];

module.exports = {
	Player, ORIGINAL_CANVAS_WIDTH, ORIGINAL_CANVAS_HEIGHT
};

},{"events":3,"mio-loader":6}],12:[function(require,module,exports){
window.Mio = require('mio-player');

window.Mio.buildMidiFile = require('mio-midi');
},{"mio-midi":10,"mio-player":11}]},{},[12]);
